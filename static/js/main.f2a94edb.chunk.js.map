{"version":3,"sources":["serviceWorker.ts","secrets.tsx","utils/API.ts","frames/map-search.tsx","frames/clue-map.tsx","utils/popup.tsx","frames/clue-frame.tsx","utils/nav-bar.tsx","frames/path-frame.tsx","frames/group-frame.tsx","pages/main-page.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","mapsKey","secrets","require","this","e","Error","axios","defaults","headers","post","create","baseURL","responseType","SearchPanel","props","autocomplete","service","geocoder","state","place","google","maps","Geocoder","select","undefined","Object","entries","length","request","query","name","bounds","map","getBounds","places","PlacesService","textSearch","results","status","PlacesServiceStatus","OK","console","log","setPlaces","place_id","previous","selected","getDetails","fields","placeRequestFields","placeId","result","setState","placeDetails","listID","Math","floor","random","clueNumber","API","description","lat","geometry","long","lng","searchResults","className","src","icon","alt","vicinity","types","join","website","href","onClick","addClue","photos","photo","index","key","getUrl","formatted_address","onLoad","ref","onPlaceChanged","getPlace","type","placeholder","style","boxSizing","border","width","height","padding","borderRadius","boxShadow","fontSize","outline","textOverflow","position","left","marginLeft","React","Component","ClueMap","center","fullscreen","sidePanel","searchedPlaces","setSearchedPlaces","bind","markers","clues","clue","id","label","list","num","onCloseClick","desc","googleMapsApiKey","GLOBALSECRETS","libraries","mapContainerStyle","zoom","options","streetViewControl","fullscreenControl","PopupTypes","Popup","deferred","p","Promise","resolve","reject","showPopup","inputValue","clickTypePromise","clickTypeDefer","top","handleClick","message","popupType","popupMessage","confirm","resetDeferred","Input","DropDown","value","onChange","target","dropdown","push","forEach","String","buttons","Confirm","input","Notif","notif","clueCompare","clue1","clue2","localeCompare","ClueList","listItems","sort","ClueFrame","intervalID","popupRef","createRef","updateClues","setInterval","clearInterval","ids","get","then","res","data","clueIDs","routes","Axios","all","finished","NavBarFrame","htmlFor","event","checked","document","documentElement","setAttribute","PathList","paths","clickHandler","PathFrame","has","current","popupFactory","updateInfo","handleAddError","response","addPath","delete","handleDeleteError","deletePath","modifyPath","orderPath","GroupList","groups","group","path","pathID","GroupFrame","addGroup","put","Number","handleAssignError","override","deleteGroup","assignPath","MainPage","Map","a","allGroups","groupID","set","allPaths","PageLoader","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"keAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,2CCJS,MAZb,aAAe,yBADfC,aACc,EACZ,IACE,IAAMC,EAAUC,EAAQ,IACxBC,KAAKH,QAAUC,EAAQ,gBACvB,MAAOG,GACP,MAAM,IAAIC,MACR,qG,gCCPRC,IAAMC,SAASC,QAAQC,KAAK,+BAAiC,IAK9CH,UAAMI,OAAO,CAC1BC,QAAS,yCAETC,aAAc,SCiBKC,E,kDAiBnB,WAAYC,GAA0B,IAAD,8BACnC,cAAMA,IAdAC,kBAa6B,IAZ7BC,aAY6B,IAX7BC,cAW6B,EAEnC,EAAKC,MAAQ,GAFsB,E,2DAQdC,GAAwC,IAAD,OAO5D,GANKhB,KAAKc,WACRd,KAAKc,SAAW,IAAIG,OAAOC,KAAKC,UAGlCnB,KAAKW,MAAMS,YAAOC,GAEmB,IAAjCC,OAAOC,QAAQP,GAAOQ,OAAc,CAAC,IAAD,EAChCC,EAAgD,CACpDC,MAAOV,EAAMW,KACbC,OAAM,UAAE5B,KAAKW,MAAMkB,WAAb,aAAE,EAAgBC,aAGrB9B,KAAKa,UACRb,KAAKa,QAAU,IAAII,OAAOC,KAAKa,OAAOC,cAAchC,KAAKW,MAAMkB,MAGjE7B,KAAKa,QAAQoB,WACXR,GACA,SAACS,EAA2CC,GAC1C,GAAIA,IAAWlB,OAAOC,KAAKa,OAAOK,oBAAoBC,GAIpD,MADAC,QAAQC,IAAIJ,GACN,IAAIjC,MAAM,gCAHhB,EAAKS,MAAM6B,UAAUN,WAQ3BlC,KAAKW,MAAM6B,UAAU,CAACxB,IACtBhB,KAAKW,MAAMS,OAAOJ,EAAMyB,Y,yCAQTC,GAA6B,IAAD,OAEZ,kBAAxB1C,KAAKW,MAAMgC,UAClB3C,KAAKW,MAAMgC,WAAaD,EAASC,WAE5B3C,KAAKa,UACRb,KAAKa,QAAU,IAAII,OAAOC,KAAKa,OAAOC,cAAchC,KAAKW,MAAMkB,MAGjE7B,KAAKa,QAAQ+B,WACX,CACEC,OAAQnC,EAAYoC,mBACpBC,QAAS/C,KAAKW,MAAMgC,WAEtB,SAACK,EAAQb,GACP,GAAIA,IAAWlB,OAAOC,KAAKa,OAAOK,oBAAoBC,GAIpD,MADAC,QAAQC,IAAIJ,GACN,IAAIjC,MAAM,gCAHhB,EAAK+C,SAAS,CAAEC,aAAcF,U,8BAWhChC,GAAwC,IAAD,IACvCmC,EAAS,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KACvCC,KAAKC,MAAsB,EAAhBD,KAAKE,WAEZC,EAAaH,KAAKC,MAAsB,IAAhBD,KAAKE,UACnCE,EAAIlD,KAAK,SAAU,CACjBqB,KAAMX,EAAMW,KACZwB,OAAQA,EACRI,WAAYA,EACZE,YAAa,cACbC,IAAG,UAAE1C,EAAM2C,gBAAR,aAAE,EAAgBjE,SAASgE,MAC9BE,KAAI,UAAE5C,EAAM2C,gBAAR,aAAE,EAAgBjE,SAASmE,U,+BAIzB,IAAD,SACHC,EAA6B,8BACjC,GACE9D,KAAKW,MAAMgC,UACoB,kBAAxB3C,KAAKW,MAAMgC,UAClB3C,KAAKe,MAAMmC,aACX,CAAC,IAAD,IACMlC,EAAQhB,KAAKe,MAAMmC,aAEzBY,EACE,yBAAKC,UAAU,kBACb,4BAAK/C,EAAMW,MACX,yBAAKqC,IAAKhD,EAAMiD,KAAMF,UAAU,OAAOG,IAAI,SAC1ClD,EAAMmD,SAHT,IAGmB,6BAHnB,oBAIUnD,EAAMoD,aAJhB,aAIU,EAAaC,KAAK,MAC1B,6BACCrD,EAAMsD,QAAU,uBAAGC,KAAMvD,EAAMsD,SAAf,WAAsC,GACvD,4BAAQE,QAAS,kBAAM,EAAKC,QAAQzD,KAApC,WAPF,UAQGA,EAAM0D,cART,aAQG,EAAc7C,KAAI,SAAC8C,EAAOC,GACzB,OAAO,yBAAKC,IAAKD,EAAOb,UAAU,aAAaC,IAAKW,EAAMG,OAAO,IAAKZ,IAAI,aAI3E,CACL,IAAM3C,EAAUvB,KAAKW,MAAMoB,OAAOF,KAAI,SAACb,GAAW,IAAD,EAC/C,OACE,yBACE+C,UACE,EAAKpD,MAAMgC,WAAa3B,EAAMyB,SAC1B,wBACA,eAENoC,IAAK7D,EAAMyB,SACX+B,QAAS,kBAAM,EAAK7D,MAAMS,OAAOJ,EAAMyB,YAEvC,4BAAKzB,EAAMW,MACX,yBAAKqC,IAAKhD,EAAMiD,KAAMF,UAAU,OAAOG,IAAI,SAC1ClD,EAAM+D,kBAXT,IAW4B,6BAX5B,oBAYU/D,EAAMoD,aAZhB,aAYU,EAAaC,KAAK,UAKhCP,EAAgB,yBAAKC,UAAU,kBAAkBxC,GAGnD,OACE,yBAAKwC,UAAU,gBACb,kBAAC,IAAD,CACEiB,OAAQ,SAACC,GAAD,OAAU,EAAKrE,aAAeqE,GACtCC,eAAgB,kBACd,EAAKA,eAAe,EAAKtE,aAAcuE,aAEzCvD,OAAM,UAAE5B,KAAKW,MAAMkB,WAAb,aAAE,EAAgBC,aAExB,2BACEsD,KAAK,OACLC,YAAY,SACZC,MAAO,CACLC,UAAU,aACVC,OAAO,wBACPC,MAAM,OACNC,OAAO,OACPC,QAAQ,SACRC,aAAa,MACbC,UAAU,+BACVC,SAAS,OACTC,QAAQ,OACRC,aAAa,WACbC,SAAU,WACVC,KAAM,KACNC,WAAY,UAKjBrC,O,GArLgCsC,IAAMC,WAA1B3F,EAOJoC,mBAA+B,CAC5C,OACA,OACA,WACA,QACA,SACA,UACA,Y,ICNiBwD,E,kDAOnB,WAAY3F,GAAsB,IAAD,8BAC/B,cAAMA,IAJAkB,SAGyB,EAE/B,EAAKd,MAAQ,CACXwF,OAAQ,CAAE7C,IAAK,WAAYG,KAAM,YACjC2C,YAAY,EACZC,WAAW,EACXC,eAAgB,IAElB,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBARM,E,8DAWP7E,GACxB/B,KAAKiD,SAAS,CAAEyD,eAAgB3E,M,+BAMxB,IAMJ0E,EANG,OASLA,EADEzG,KAAKe,MAAM0F,UAEX,6BACE,kBAAC,EAAD,CACE5E,IAAK7B,KAAK6B,IACVW,UAAWxC,KAAK2G,kBAChB5E,OAAQ/B,KAAKe,MAAM2F,eACnBtF,OAAQpB,KAAKW,MAAMS,OACnBuB,SAAU3C,KAAKW,MAAMgC,WAEvB,yBACEoB,UAAU,cACVuB,MAAO,CAAEY,KAAM,OACf1B,QAAS,kBAAM,EAAKvB,SAAS,CAAEwD,WAAW,MAH5C,MAWF,yBACE1C,UAAU,cACVS,QAAS,kBAAM,EAAKvB,SAAS,CAAEwD,WAAW,MAF5C,KASJ,IAAMI,EAAU7G,KAAKW,MAAMmG,MAAMjF,KAAI,SAACkF,GACpC,OACE,kBAAC,IAAD,CACElC,IAAKkC,EAAKC,GACVf,SAAUc,EAAK/F,MACfwD,QAAS,kBAAM,EAAK7D,MAAMS,OAAO2F,EAAKC,KACtCC,MAAOF,EAAKG,KAAOH,EAAKI,KAEvBJ,EAAKC,KAAO,EAAKrG,MAAMgC,SACtB,kBAAC,IAAD,CAAYyE,aAAc,kBAAM,EAAKzG,MAAMS,YAAOC,KAChD,6BACE,4BAAK0F,EAAKG,KAAOH,EAAKI,IAAM,KAAOJ,EAAKpF,MACvCoF,EAAKM,OAIV,OAMFvD,EAAgB9D,KAAKe,MAAM2F,eAAe7E,KAAI,SAACb,GAAW,IAAD,EAE7D,OACE,kBAAC,IAAD,CACE6D,IAAK7D,EAAMyB,SACXwD,SAAQ,UAAEjF,EAAM2C,gBAAR,aAAE,EAAgBjE,SAC1B8E,QAAS,kBAAM,EAAK7D,MAAMS,OAAOJ,EAAMyB,YAEtCzB,EAAMyB,WAAa,EAAK9B,MAAMgC,SAC7B,kBAAC,IAAD,CAAYyE,aAAc,kBAAM,EAAKzG,MAAMS,YAAOC,KAChD,6BACE,4BAAKL,EAAMW,QAIf,OAMR,OACE,yBACEoC,UACE/D,KAAKe,MAAMyF,WAAa,qBAAuB,mBAGjD,kBAAC,IAAD,CACEc,iBAAkBC,EAAc1H,QAChC2H,UAAWlB,EAAQkB,WAEnB,kBAAC,IAAD,CACEC,kBAAmB,CAAEhC,MAAO,OAAQC,OAAQ,QAC5Ca,OAAQvG,KAAKe,MAAMwF,OACnBmB,KAAM,GACNC,QA9FQ,CACdC,mBAAmB,EACnBC,mBAAmB,GA6Fb7C,OAAQ,SAACnD,GACP,EAAKA,IAAMA,IAGb,yBACEkC,UAAU,qBACVS,QAAS,kBACP,EAAKvB,SAAS,CACZuD,YAAa,EAAKzF,MAAMyF,WACxBC,WAAY,EAAK1F,MAAMyF,eAI1BxG,KAAKe,MAAMyF,WAAa,kBAAoB,oBAG9CK,EAEA/C,EAEA2C,S,GA7IwBL,IAAMC,WAAtBC,EAKJkB,UAAY,CAAC,SAAU,Y,ICjC5BM,E,sBAAAA,K,kBAAAA,E,cAAAA,E,cAAAA,E,qBAAAA,M,SAsCSC,E,kDACnB,WAAYpH,GAAoB,IAAD,sBAC7B,cAAMA,GACN,IAAIqH,OAAW3G,EACX4G,EAAI,IAAIC,SAAiB,SAAUC,EAASC,GAC9CJ,EAAW,CAAEG,QAASA,EAASC,OAAQA,MAJZ,OAM7B,EAAKrH,MAAQ,CACXsH,WAAW,EACXC,WAAY,GACZC,iBAAkBN,EAClBO,eAAgBR,EAChB9B,KAAM,MACNuC,IAAK,OAEP,EAAKC,YAAc,EAAKA,YAAY9B,KAAjB,gBAdU,E,4DAqB7B,IAAIoB,OAAW3G,EACX4G,EAAI,IAAIC,SAAiB,SAAUC,EAASC,GAC9CJ,EAAW,CAAEG,QAASA,EAASC,OAAQA,MAEzCpI,KAAKiD,SAAS,CAAEsF,iBAAkBN,EAAGO,eAAgBR,M,4EAWrD5C,EACAuD,EACAhB,G,qFAEA3H,KAAKiD,SAAS,CACZoF,WAAW,EACXO,UAAWxD,EACXyD,aAAcF,EACdhB,QAASA,I,SAEoB3H,KAAKe,MAAMwH,iB,cAApCO,E,OACN9I,KAAKiD,SAAS,CAAEoF,WAAW,IAC3BrI,KAAK+I,gB,kBAEE,IAAIb,SAAgB,SAACC,EAASC,GAC/BU,EACE,EAAK/H,MAAM6H,YAAcd,EAAWkB,OAO7B,EAAKjI,MAAM6H,YAAcd,EAAWmB,UANf,KAA1B,EAAKlI,MAAMuH,YACbF,IAGFD,EAAQ,EAAKpH,MAAMuH,YACnB,EAAKrF,SAAS,CAAEqF,WAAY,MAS5BH,KAGE,EAAKpH,MAAM6H,YAAcd,EAAWkB,OACtC,EAAK/F,SAAS,CAAEqF,WAAY,KAE9BF,S,6IAQcU,GAClB9I,KAAKe,MAAMyH,eAAgBL,QAAQW,K,gCAOL,IAAD,OAC7B,OACE,yBAAK/E,UAAU,gBACb,4BAAQA,UAAU,OAAOS,QAAS,kBAAM,EAAKkE,aAAY,KAAzD,QAGA,4BAAQ3E,UAAU,SAASS,QAAS,kBAAM,EAAKkE,aAAY,KAA3D,a,8BAWwB,IAAD,OAC3B,OACE,yBAAK3E,UAAU,gBACb,2BACEqB,KAAK,OACL4B,GAAG,QACHkC,MAAOlJ,KAAKe,MAAMuH,WAClBa,SAAU,SAAClJ,GAAD,OAAO,EAAKgD,SAAS,CAAEqF,WAAYrI,EAAEmJ,OAAOF,WAExD,4BAAQnF,UAAU,OAAOS,QAAS,kBAAM,EAAKkE,aAAY,KAAzD,QAGA,4BAAQ3E,UAAU,SAASS,QAAS,kBAAM,EAAKkE,aAAY,KAA3D,a,8BAWwB,IAAD,OAC3B,OACE,yBAAK3E,UAAU,gBACb,4BAAQA,UAAU,QAAQS,QAAS,kBAAM,EAAKkE,aAAY,KAA1D,W,iCAW2B,IAAD,OACxBW,EAA0B,GAchC,OAbAA,EAASC,KACP,4BAAQJ,MAAO,GAAIrE,IAAK,IAAxB,OAIF7E,KAAKe,MAAM4G,QAAS4B,SAAQ,SAAC5H,EAAcqF,GACzCqC,EAASC,KACP,4BAAQJ,MAAOM,OAAOxC,GAAKnC,IAAKmC,GAC7BrF,OAML,yBAAKoC,UAAU,gBACb,4BACEiD,GAAG,QACHkC,MAAOlJ,KAAKe,MAAMuH,WAClBa,SAAU,SAAClJ,GAAD,OAAO,EAAKgD,SAAS,CAAEqF,WAAYrI,EAAEmJ,OAAOF,UAErDG,GAEH,4BAAQtF,UAAU,OAAOS,QAAS,kBAAM,EAAKkE,aAAY,KAAzD,UAGA,4BAAQ3E,UAAU,SAASS,QAAS,kBAAM,EAAKkE,aAAY,KAA3D,a,+BAWJ,IAAIe,EAEJ,OAAQzJ,KAAKe,MAAM6H,WACjB,KAAKd,EAAW4B,QACdD,EAAUzJ,KAAK8I,UACf,MAEF,KAAKhB,EAAWkB,MACdS,EAAUzJ,KAAK2J,QACf,MAEF,KAAK7B,EAAW8B,MACdH,EAAUzJ,KAAK6J,QACf,MAEF,KAAK/B,EAAWmB,SACdQ,EAAUzJ,KAAKqJ,WACf,MAEF,QACEI,EAAU,yBAAK1F,UAAU,iBAI7B,OACE,6BACE,yBAAKA,UAAW/D,KAAKe,MAAMsH,UAAY,WAAa,WACpD,yBAAKtE,UAAW/D,KAAKe,MAAMsH,UAAY,QAAU,UAC/C,yBAAKtE,UAAU,cAAc/D,KAAKe,MAAM8H,cAEvCY,Q,GApNwBrD,IAAMC,WCXzC,SAASyD,EAAYC,EAAaC,GAChC,OAAID,EAAM7C,OAAS8C,EAAM9C,KAChB6C,EAAM5C,IAAM6C,EAAM7C,IAElB4C,EAAM7C,KAAK+C,cAAcD,EAAM9C,M,IAqBpCgD,E,uKAIM,IAAD,OACDC,EAAYnK,KAAKW,MAAMmG,MAAMsD,KAAKN,GAAajI,KAAI,SAACkF,GACxD,OACE,wBAAIlC,IAAKkC,EAAKC,GAAIxC,QAAS,kBAAM,EAAK7D,MAAMS,OAAO2F,EAAKC,MACtD,wBAAIjD,UAAWgD,EAAKC,KAAO,EAAKrG,MAAMgC,SAAW,WAAa,IAC3DoE,EAAKG,KAAOH,EAAKI,IAAM,KAAOJ,EAAKpF,UAO5C,OACE,2BAAOoC,UAAU,cACf,+BACE,4BACE,+CAGJ,+BAAQoG,Q,GAvBO/D,IAAMC,WAgDRgE,E,kDAOnB,WAAY1J,GAAwB,IAAD,8BACjC,cAAMA,IAJR2J,gBAGmC,IAFnCC,cAEmC,EAEjC,EAAKxJ,MAAQ,CACX4B,cAAUtB,EACVyF,MAAO,IAET,EAAKyD,SAAWnE,IAAMoE,YACtB,EAAKC,YAAc,EAAKA,YAAY7D,KAAjB,gBAPc,E,gEAcjC5G,KAAKyK,cAELzK,KAAKsK,WAAaI,YAAY1K,KAAKyK,YAAa,O,6CAOhDE,cAAc3K,KAAKsK,c,oCAME,IAAD,OACdxD,EAAgB,GAClB8D,EAAgB,GACpBpH,EAAIqH,IAAI,WACLC,MAAK,SAACC,GAEL,OADAH,EAAMG,EAAIC,KAAKC,QACRF,EAAIC,KAAKC,QAAQpJ,KAAI,SAACmF,GAC3B,OAAOxD,EAAIqH,IAAmB,UAAY7D,EAAI,UAGjD8D,MAAK,SAACI,GAAD,OAAYC,IAAMC,IAAmBF,MAC1CJ,MAAK,SAACC,GACLA,EAAIxB,SAAQ,SAACwB,EAAoBnG,GAC/B,IAAMmC,EAAOgE,EAAIC,KACjBlE,EAAMwC,KAAK,CACTpC,KAAMH,EAAK5D,OACXgE,IAAKJ,EAAKxD,WACV5B,KAAMoF,EAAKpF,KACX0F,KAAMN,EAAKtD,YACX4H,SAAUtE,EAAKsE,SACfrK,MAAO,CAAE6C,IAAKkD,EAAKnD,KAAMF,IAAKqD,EAAKrD,KACnCsD,GAAI4D,EAAIhG,WAIbkG,MAAK,kBAAM,EAAK7H,SAAS,CAAE6D,e,+BAMtB,IAAD,OACP,OACE,yBAAK/C,UAAW,cACd,yBAAKA,UAAU,aACb,kBAAC,EAAD,CACEpB,SAAU3C,KAAKe,MAAM4B,SACrBvB,OAAQ,SAAC4F,GAAD,OAAgB,EAAK/D,SAAS,CAAEN,SAAUqE,KAClDF,MAAO9G,KAAKe,MAAM+F,SAGtB,yBAAK/C,UAAU,YACb,kBAAC,EAAD,CACE+C,MAAO9G,KAAKe,MAAM+F,MAClBnE,SAAU3C,KAAKe,MAAM4B,SACrBvB,OAAQ,SAAC4F,GAAD,OAAgB,EAAK/D,SAAS,CAAEN,SAAUqE,QAGtD,kBAAC,EAAD,CAAO/B,IAAKjF,KAAKuK,gB,GApFcnE,IAAMC,W,gBC9ExBiF,E,uKAQjB,OACE,yBAAKvH,UAAU,WACb,uBAAGQ,KAAK,+CAAR,kBAEA,yBAAKR,UAAU,wBACb,2BAAOA,UAAU,eAAewH,QAAQ,YACtC,2BACEnG,KAAK,WACL4B,GAAG,WACHxC,QAAS,SAACgH,GACKA,EAAMpC,OAA4BqC,QA3B3DC,SAASC,gBAAgBC,aAAa,aAAc,SAEpDF,SAASC,gBAAgBC,aAAa,aAAc,WA4B5C,yBAAK7H,UAAU,kBAEjB,wD,GAvB+BqC,IAAMC,WCNzCwF,G,6KAIM,IAAD,OAEDC,EAAuB,GAU7B,OATA9L,KAAKW,MAAMmL,MAAMvC,SAAQ,SAAC5H,EAAMqF,GAC9B8E,EAAMxC,KACJ,wBAAIzE,IAAKmC,EAAIxC,QAAS,kBAAM,EAAK7D,MAAMoL,aAAa/E,KAClD,wBAAIjD,UAAWiD,IAAO,EAAKrG,MAAMgC,SAAW,WAAa,IACtDhB,QAMP,yBAAKoC,UAAU,aACb,2BAAOA,UAAU,cACf,+BACE,4BACE,+CAGJ,+BAAQ+H,S,GAxBK1F,IAAMC,YAiDR2F,E,kDAMnB,WAAYrL,GAAwB,IAAD,8BACjC,cAAMA,IAHA4J,cAE2B,EAEjC,EAAKxJ,MAAQ,CACX4B,cAAUtB,GAEZ,EAAKkJ,SAAWnE,IAAMoE,YALW,E,iEAY7BxK,KAAKe,MAAM4B,WAAa3C,KAAKW,MAAMmL,MAAMG,IAAIjM,KAAKe,MAAM4B,WAC1D3C,KAAKiD,SAAS,CAAEN,cAAUtB,M,gCAQnB,IAAD,SACR,UAAArB,KAAKuK,SAAS2B,eAAd,SACIC,aAAarE,EAAWkB,MAAO,2BAChC8B,MACC,SAACC,GACCvH,EAAIlD,KAAK,SAAU,CAAEqB,KAAMoJ,IAAOD,KAAK,EAAKnK,MAAMyL,YAAY,SAACrB,GAAD,OAC5D,EAAKsB,eAAetB,EAAIuB,SAASnK,WAEnCG,QAAQC,IAAI,sBAAwBwI,MAEtC,iB,qCAQS5I,GAAiB,IAEV,EAFS,OAE7B,GAAe,MAAXA,EAQF,MADAG,QAAQC,IAAIJ,GACN,IAAIjC,MAAM,sBAPhB,UAAAF,KAAKuK,SAAS2B,eAAd,SACIC,aAAarE,EAAW8B,MAAO,uBAChCkB,MAAK,kBAAM,EAAKyB,e,mCAYT,IACa,EAalB,EAdI,OACPvM,KAAKe,MAAM4B,SACb,UAAA3C,KAAKuK,SAAS2B,eAAd,SACIC,aAAarE,EAAW4B,QAAS,yBAClCoB,MACC,WACEtH,EAAIgJ,OAAO,UAAY,EAAKzL,MAAM4B,SAAU,IAAImI,KAC9C,EAAKnK,MAAMyL,YACX,SAACrB,GAAD,OAAS,EAAK0B,kBAAkB1B,EAAIuB,SAASnK,WAE/CG,QAAQC,IAAI,iBAAmB,EAAKxB,MAAM4B,aAE5C,eAGJ,UAAA3C,KAAKuK,SAAS2B,eAAd,SAAuBC,aAAarE,EAAW8B,MAAO,sB,wCAQxCzH,GAEhB,GAAe,MAAXA,EAMF,MADAG,QAAQC,IAAIJ,GACN,IAAIjC,MAAM,sBALhBF,KAAKW,MAAMyL,e,mCAca,IAAD,EAKlB,EALHpM,KAAKe,MAAM4B,SACb,UAAA3C,KAAKuK,SAAS2B,eAAd,SAAuBC,aACrBrE,EAAW8B,MACX,6BAGF,UAAA5J,KAAKuK,SAAS2B,eAAd,SAAuBC,aAAarE,EAAW8B,MAAO,sB,wCAQxCzH,GAEhB,GAAe,MAAXA,EAMF,MADAG,QAAQC,IAAIJ,GACN,IAAIjC,MAAM,sBANG,IAAD,EAClB,UAAAF,KAAKuK,SAAS2B,eAAd,SAAuBC,aAAarE,EAAW8B,MAAO,kB,kCAc9B,IAAD,EAKlB,EALH5J,KAAKe,MAAM4B,SACb,UAAA3C,KAAKuK,SAAS2B,eAAd,SAAuBC,aACrBrE,EAAW8B,MACX,6BAGF,UAAA5J,KAAKuK,SAAS2B,eAAd,SAAuBC,aAAarE,EAAW8B,MAAO,sB,uCAQzCzH,GAEf,GAAe,MAAXA,EAMF,MADAG,QAAQC,IAAIJ,GACN,IAAIjC,MAAM,sBANG,IAAD,EAClB,UAAAF,KAAKuK,SAAS2B,eAAd,SAAuBC,aAAarE,EAAW8B,MAAO,kB,+BAYhD,IAAD,OAEP,OACE,yBAAK7F,UAAU,cACb,kBAAC,EAAD,CACE+H,MAAO9L,KAAKW,MAAMmL,MAClBC,aAAc,SAAC/E,GAAD,OAAgB,EAAK/D,SAAS,CAAEN,SAAUqE,KACxDrE,SAAU3C,KAAKe,MAAM4B,WAEvB,4BAAQoB,UAAU,cAAcS,QAAS,kBAAM,EAAK+H,YAApD,YAGA,4BAAQxI,UAAU,cAAcS,QAAS,kBAAM,EAAKkI,eAApD,eAGA,4BAAQ3I,UAAU,cAAcS,QAAS,kBAAM,EAAKmI,eAApD,eAGA,4BAAQ5I,UAAU,cAAcS,QAAS,kBAAM,EAAKoI,cAApD,cAGA,kBAAC,EAAD,CAAO3H,IAAKjF,KAAKuK,gB,GAvLcnE,IAAMC,WCxCvCwG,G,6KAIM,IAAD,OAEDC,EAAwB,GAc9B,OAbA9M,KAAKW,MAAMmM,OAAOvD,SAAQ,SAACwD,EAAO/F,GAChC,IAAMgG,EACJD,EAAME,QAAU,EAAKtM,MAAMmL,MAAMG,IAAIc,EAAME,QACvC,EAAKtM,MAAMmL,MAAMjB,IAAIkC,EAAME,QAC3B,mBACNH,EAAOxD,KACL,wBAAIzE,IAAKmC,EAAIxC,QAAS,kBAAM,EAAK7D,MAAMoL,aAAa/E,KAClD,wBAAIjD,UAAWiD,IAAO,EAAKrG,MAAMgC,SAAW,WAAa,IACtDoK,EAAMpL,KAAO,OAASqL,QAM7B,yBAAKjJ,UAAU,aACb,2BAAOA,UAAU,eACf,+BACE,4BACE,gDAGJ,+BAAQ+I,S,GA5BM1G,IAAMC,YAsDT6G,E,kDAMnB,WAAYvM,GAAyB,IAAD,8BAClC,cAAMA,IAHR4J,cAEoC,EAElC,EAAKxJ,MAAQ,CACX4B,cAAUtB,GAEZ,EAAKkJ,SAAWnE,IAAMoE,YALY,E,iEAY9BxK,KAAKe,MAAM4B,WAAa3C,KAAKW,MAAMmM,OAAOb,IAAIjM,KAAKe,MAAM4B,WAC3D3C,KAAKiD,SAAS,CAAEN,cAAUtB,M,iCAQV,IAAD,SACjB,UAAArB,KAAKuK,SAAS2B,eAAd,SACIC,aAAarE,EAAWkB,MAAO,4BAChC8B,MACC,SAACC,GACCvH,EAAIlD,KAAK,UAAW,CAAEqB,KAAMoJ,IAAOD,KACjC,EAAKnK,MAAMyL,YACX,SAACrB,GAAD,OAAS,EAAKsB,eAAetB,EAAIuB,SAASnK,WAE5CG,QAAQC,IAAI,uBAAyBwI,MAEvC,iB,qCAQiB5I,GAAiB,IAElB,EAFiB,OAErC,GAAe,MAAXA,EAQF,MADAG,QAAQC,IAAIJ,GACN,IAAIjC,MAAM,sBAPhB,UAAAF,KAAKuK,SAAS2B,eAAd,SACIC,aAAarE,EAAW8B,MAAO,uBAChCkB,MAAK,kBAAM,EAAKqC,gB,oCAaA,IACI,EAYlB,EAba,OAChBnN,KAAKe,MAAM4B,SACb,UAAA3C,KAAKuK,SAAS2B,eAAd,SACIC,aAAarE,EAAW4B,QAAS,0BAClCoB,MACC,WACEtH,EAAIgJ,OAAO,WAAa,EAAKzL,MAAM4B,UAAUmI,KAC3C,EAAKnK,MAAMyL,YACX,SAACrB,GAAD,OAAS,EAAK0B,kBAAkB1B,EAAIuB,SAASnK,cAGjD,eAGJ,UAAAnC,KAAKuK,SAAS2B,eAAd,SAAuBC,aACrBrE,EAAW8B,MACX,uB,wCASoBzH,GAExB,GAAe,MAAXA,EAMF,MADAG,QAAQC,IAAIJ,GACN,IAAIjC,MAAM,sBALhBF,KAAKW,MAAMyL,e,mCASO,IACK,EAoBlB,EArBY,OACfpM,KAAKe,MAAM4B,SACb,UAAA3C,KAAKuK,SAAS2B,eAAd,SACIC,aACArE,EAAWmB,SACX,iDACAjJ,KAAKW,MAAMmL,OAEZhB,MACC,SAACC,GACCvH,EAAI4J,IAAI,WAAa,EAAKrM,MAAM4B,SAAU,CACxCsK,OAAQI,OAAOtC,KACdD,KAAK,EAAKnK,MAAMyL,YAAY,SAACrB,GAAD,OAC7B,EAAKuC,kBAAkBvC,EAAIuB,SAASnK,OAAQkL,OAAOtC,OAErDzI,QAAQC,IACN,UAAY,EAAKxB,MAAM4B,SAAW,mBAAqBoI,MAG3D,eAGJ,UAAA/K,KAAKuK,SAAS2B,eAAd,SAAuBC,aACrBrE,EAAW8B,MACX,uB,wCAKoBzH,EAAgB8K,GAAiB,IAErC,EAFoC,OAExD,GAAe,MAAX9K,EAuBF,MADAG,QAAQC,IAAIJ,GACN,IAAIjC,MAAM,sBAtBhB,UAAAF,KAAKuK,SAAS2B,eAAd,SACIC,aACArE,EAAW4B,QACX,2DAEDoB,MAAK,WACJtH,EAAI4J,IAAI,WAAa,EAAKrM,MAAM4B,SAAU,CACxCsK,OAAQA,EACRM,UAAU,IAEZjL,QAAQC,IACN,UACE,EAAKxB,MAAM4B,SACX,mBACAsK,EACA,sB,+BAcF,IAAD,OACP,OACE,yBAAKlJ,UAAU,eACb,kBAAC,EAAD,CACE+H,MAAO9L,KAAKW,MAAMmL,MAClBgB,OAAQ9M,KAAKW,MAAMmM,OACnBf,aAAc,SAAC/E,GAAD,OAAgB,EAAK/D,SAAS,CAAEN,SAAUqE,KACxDrE,SAAU3C,KAAKe,MAAM4B,WAEvB,4BACEoB,UAAU,yBACVS,QAAS,kBAAM,EAAK2I,aAFtB,aAMA,4BACEpJ,UAAU,4BACVS,QAAS,kBAAM,EAAKgJ,gBAFtB,gBAMA,4BACEzJ,UAAU,2BACVS,QAAS,kBAAM,EAAKiJ,eAFtB,eAMA,kBAAC,EAAD,CAAOxI,IAAKjF,KAAKuK,gB,GA7LenE,IAAMC,WC3DzBqH,E,kDAKnB,WAAY/M,GAAuB,IAAD,8BAChC,cAAMA,IAFA2J,gBAC0B,EAEhC,EAAKvJ,MAAQ,CAAE+L,OAAQ,IAAIa,IAAO7B,MAAO,IAAI6B,KAC7C,EAAKvB,WAAa,EAAKA,WAAWxF,KAAhB,gBAHc,E,gEAUhC5G,KAAKoM,aAELpM,KAAKsK,WAAaI,YAAY1K,KAAKoM,WAAY,O,6CAO/CzB,cAAc3K,KAAKsK,c,mCAMC,IAAD,OAEnB9G,EAAIqH,IAAI,UAAW,IAChBC,KADH,uCACQ,WAAOC,GAAP,qBAAA6C,EAAA,sDACEd,EAAS,IAAIa,IADf,cAEgB5C,EAAIC,KAAK6C,WAFzB,aAAAD,EAAA,kCAAAA,EAAA,6DAEKE,EAFL,iBAGItK,EAAIqH,IAAI,WAAaiD,EAAS,IAAIhD,MAAK,SAACiC,GAAD,OAC3CD,EAAOiB,IAAID,EAAS,CAClBnM,KAAMoL,EAAM/B,KAAKrJ,KACjBsL,OAAQF,EAAM/B,KAAKiC,YANrB,kSAUGH,GAVH,gEADR,uDAaGhC,MAAK,SAACgC,GAAD,OAAY,EAAK7J,SAAS,CAAE6J,cAGpCtJ,EAAIqH,IAAI,SAAU,IACfC,KADH,uCACQ,WAAOC,GAAP,qBAAA6C,EAAA,sDACE9B,EAAQ,IAAI6B,IADd,cAEe5C,EAAIC,KAAKgD,UAFxB,aAAAJ,EAAA,kCAAAA,EAAA,6DAEKX,EAFL,iBAGIzJ,EAAIqH,IAAI,UAAYoC,EAAQ,IAAInC,MAAK,SAACkC,GACtCA,EAAKhC,KAAKrJ,KACZmK,EAAMiC,IAAId,EAAQD,EAAKhC,KAAKrJ,MAE5BmK,EAAMiC,IAAId,EAAQ,EAAKlM,MAAM+K,MAAMjB,IAAIoC,OAPzC,kSAWGnB,GAXH,gEADR,uDAcGhB,MAAK,SAACgB,GAAD,OAAW,EAAK7I,SAAS,CAAE6I,e,+BAInC,OACE,yBAAK/H,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAW+H,MAAO9L,KAAKe,MAAM+K,MAAOM,WAAYpM,KAAKoM,aACrD,kBAAC,EAAD,CACEU,OAAQ9M,KAAKe,MAAM+L,OACnBhB,MAAO9L,KAAKe,MAAM+K,MAClBM,WAAYpM,KAAKoM,kB,GA1EWhG,IAAMC,WCNtC4H,E,uKAKF,OACE,6BACE,kBAAC,EAAD,W,GAPiB7H,IAAMC,WAgB/B6H,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF1C,SAAS2C,eAAe,SXgGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1D,MAAK,SAAC2D,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNtM,QAAQsM,MAAMA,EAAMjG,c","file":"static/js/main.f2a94edb.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","class Secrets {\n  mapsKey: string;\n  constructor() {\n    try {\n      const secrets = require(\"./secrets.json\");\n      this.mapsKey = secrets[\"maps-api-key\"];\n    } catch (e) {\n      throw new Error(\n        \"No secrets.json detected. Please place secrets.json in the project root following the template.\"\n      );\n    }\n  }\n}\n\nexport default new Secrets();\n","import axios from \"axios\";\naxios.defaults.headers.post[\"Access-Control-Allow-Origin\"] = \"*\";\n\n/**\n * Creates the default axios object to access the backend.\n */\nexport default axios.create({\n  baseURL: \"http://husky-hunties.azurewebsites.net\",\n  //baseURL: \"http://localhost:3000\",\n  responseType: \"json\",\n});\n","import React from \"react\";\nimport { Autocomplete } from \"@react-google-maps/api\";\nimport \"../css/maps.css\";\nimport API from \"../utils/API\";\n\n/**\n * Properties type for the search panel component.\n */\ninterface SearchPanelProps {\n  map?: google.maps.Map<Element>;\n  setPlaces(places: google.maps.places.PlaceResult[]): void;\n  places: google.maps.places.PlaceResult[];\n  select(id?: string): void;\n  selected?: string | number;\n}\n\n/**\n * State type for the search panel component\n */\ninterface SearchPanelState {\n  placeDetails?: google.maps.places.PlaceResult;\n}\n\n/**\n * A class to represent a search panel component that facilitates easy searching for locations on the map.\n */\nexport default class SearchPanel extends React.Component<\n  SearchPanelProps,\n  SearchPanelState\n> {\n  private autocomplete?: google.maps.places.Autocomplete;\n  private service?: google.maps.places.PlacesService;\n  private geocoder?: google.maps.Geocoder;\n  private static placeRequestFields: string[] = [\n    \"name\",\n    \"icon\",\n    \"vicinity\",\n    \"types\",\n    \"photos\",\n    \"website\",\n    \"geometry\"\n  ];\n\n  constructor(props: SearchPanelProps) {\n    super(props);\n    this.state = {};\n  }\n\n  /**\n   * Handles the user either selecting a place from the list, or searching for a term.\n   */\n  private onPlaceChanged(place: google.maps.places.PlaceResult) {\n    if (!this.geocoder) {\n      this.geocoder = new google.maps.Geocoder();\n    }\n\n    this.props.select(undefined);\n\n    if (Object.entries(place).length === 1) {\n      const request: google.maps.places.TextSearchRequest = {\n        query: place.name,\n        bounds: this.props.map?.getBounds()!,\n      };\n\n      if (!this.service) {\n        this.service = new google.maps.places.PlacesService(this.props.map!);\n      }\n\n      this.service.textSearch(\n        request,\n        (results: google.maps.places.PlaceResult[], status) => {\n          if (status === google.maps.places.PlacesServiceStatus.OK) {\n            this.props.setPlaces(results);\n          } else {\n            console.log(status);\n            throw new Error(\"Places Search Request Failed\");\n          }\n        }\n      );\n    } else {\n      this.props.setPlaces([place]);\n      this.props.select(place.place_id!);\n    }\n  }\n\n  /**\n   * If the selected value has changed to a searched option, gets details about that option.\n   * @param previous the previous props\n   */\n  componentDidUpdate(previous: SearchPanelProps) {\n    if (\n      typeof this.props.selected === \"string\" &&\n      this.props.selected !== previous.selected\n    ) {\n      if (!this.service) {\n        this.service = new google.maps.places.PlacesService(this.props.map!);\n      }\n\n      this.service.getDetails(\n        {\n          fields: SearchPanel.placeRequestFields,\n          placeId: this.props.selected,\n        },\n        (result, status) => {\n          if (status === google.maps.places.PlacesServiceStatus.OK) {\n            this.setState({ placeDetails: result });\n          } else {\n            console.log(status);\n            throw new Error(\"Place Detail Request Failed.\");\n          }\n        }\n      );\n    }\n  }\n\n  // onClick to add clue from the search bar\n  addClue(place: google.maps.places.PlaceResult) {\n    const listID = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"][\n      Math.floor(Math.random() * 6)\n    ];\n    const clueNumber = Math.floor(Math.random() * 100);\n    API.post(\"/clues\", {\n      name: place.name,\n      listID: listID,\n      clueNumber: clueNumber,\n      description: \"description\",\n      lat: place.geometry?.location.lat(),\n      long: place.geometry?.location.lng(),\n    });\n  }\n\n  render() {\n    let searchResults: JSX.Element = <div></div>;\n    if (\n      this.props.selected &&\n      typeof this.props.selected === \"string\" &&\n      this.state.placeDetails\n    ) {\n      const place = this.state.placeDetails;\n\n      searchResults = (\n        <div className=\"search-results\">\n          <h4>{place.name}</h4>\n          <img src={place.icon} className=\"icon\" alt=\"icon\" />\n          {place.vicinity} <br></br>\n          Types: {place.types?.join(\", \")}\n          <br />\n          {place.website ? <a href={place.website}>Website</a> : \"\"}\n          <button onClick={() => this.addClue(place)}>AddClue</button>\n          {place.photos?.map((photo, index) => {\n            return <img key={index} className=\"search-img\" src={photo.getUrl({})} alt=\"\" />;\n          })}\n        </div>\n      );\n    } else {\n      const entries = this.props.places.map((place) => {\n        return (\n          <div\n            className={\n              this.props.selected === place.place_id\n                ? \"search-entry selected\"\n                : \"search-entry\"\n            }\n            key={place.place_id}\n            onClick={() => this.props.select(place.place_id!)}\n          >\n            <h6>{place.name}</h6>\n            <img src={place.icon} className=\"icon\" alt=\"icon\" />\n            {place.formatted_address} <br></br>\n            Types: {place.types?.join(\", \")}\n          </div>\n        );\n      });\n\n      searchResults = <div className=\"search-results\">{entries}</div>;\n    }\n\n    return (\n      <div className=\"search-panel\">\n        <Autocomplete\n          onLoad={(ref) => (this.autocomplete = ref)}\n          onPlaceChanged={() =>\n            this.onPlaceChanged(this.autocomplete!.getPlace())\n          }\n          bounds={this.props.map?.getBounds()!}\n        >\n          <input\n            type=\"text\"\n            placeholder=\"Search\"\n            style={{\n              boxSizing: `border-box`,\n              border: `1px solid transparent`,\n              width: `100%`,\n              height: `32px`,\n              padding: `0 12px`,\n              borderRadius: `3px`,\n              boxShadow: `0 2px 6px rgba(0, 0, 0, 0.3)`,\n              fontSize: `14px`,\n              outline: `none`,\n              textOverflow: `ellipses`,\n              position: \"absolute\",\n              left: \"0%\",\n              marginLeft: \"0px\",\n            }}\n          />\n        </Autocomplete>\n\n        {searchResults}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport GLOBALSECRETS from \"../secrets\";\nimport {\n  GoogleMap,\n  LoadScript,\n  Marker,\n  InfoWindow,\n} from \"@react-google-maps/api\";\nimport { Clue, Place } from \"./clue-frame\";\nimport SearchPanel from \"./map-search\";\nimport \"../css/maps.css\";\n\n/**\n * Properties type for the clue map Component\n */\ninterface ClueMapProps {\n  clues: Clue[];\n  selected?: number | string;\n  select(id?: number | string): void;\n}\n\n/**\n * State type for the clue map Component\n */\ninterface ClueMapState {\n  center: Place;\n  fullscreen: boolean;\n  sidePanel: boolean;\n  searchedPlaces: google.maps.places.PlaceResult[];\n}\n\n/**\n * A class to represent a clue map component. Display a given list of ClueIDs on a map.\n */\nexport default class ClueMap extends React.Component<\n  ClueMapProps,\n  ClueMapState\n> {\n  private map?: google.maps.Map<Element>;\n  private static libraries = [\"places\", \"geometry\"];\n\n  constructor(props: ClueMapProps) {\n    super(props);\n    this.state = {\n      center: { lat: 42.3406995, lng: -71.0897018 },\n      fullscreen: false,\n      sidePanel: false,\n      searchedPlaces: [],\n    };\n    this.setSearchedPlaces = this.setSearchedPlaces.bind(this);\n  }\n\n  private setSearchedPlaces(places: google.maps.places.PlaceResult[]) {\n    this.setState({ searchedPlaces: places });\n  }\n\n  /**\n   * Renders the ClueMap.\n   */\n  render() {\n    const options = {\n      streetViewControl: false,\n      fullscreenControl: false,\n    };\n\n    let sidePanel;\n\n    if (this.state.sidePanel) {\n      sidePanel = (\n        <div>\n          <SearchPanel\n            map={this.map}\n            setPlaces={this.setSearchedPlaces}\n            places={this.state.searchedPlaces}\n            select={this.props.select}\n            selected={this.props.selected}\n          />\n          <div\n            className=\"side-handle\"\n            style={{ left: \"20%\" }}\n            onClick={() => this.setState({ sidePanel: false })}\n          >\n            &lt;\n          </div>\n        </div>\n      );\n    } else {\n      sidePanel = (\n        <div\n          className=\"side-handle\"\n          onClick={() => this.setState({ sidePanel: true })}\n        >\n          &gt;\n        </div>\n      );\n    }\n\n    const markers = this.props.clues.map((clue) => {\n      return (\n        <Marker\n          key={clue.id}\n          position={clue.place}\n          onClick={() => this.props.select(clue.id)}\n          label={clue.list + clue.num}\n        >\n          {clue.id === this.props.selected ? (\n            <InfoWindow onCloseClick={() => this.props.select(undefined)}>\n              <div>\n                <h1>{clue.list + clue.num + \": \" + clue.name}</h1>\n                {clue.desc}\n              </div>\n            </InfoWindow>\n          ) : (\n            \"\"\n          )}\n        </Marker>\n      );\n    });\n\n    const searchResults = this.state.searchedPlaces.map((place) => {\n\n      return (\n        <Marker\n          key={place.place_id}\n          position={place.geometry?.location!}\n          onClick={() => this.props.select(place.place_id!)}\n        >\n          {place.place_id === this.props.selected ? (\n            <InfoWindow onCloseClick={() => this.props.select(undefined)}>\n              <div>\n                <h1>{place.name}</h1>\n              </div>\n            </InfoWindow>\n          ) : (\n            \"\"\n          )}\n        </Marker>\n      );\n    });\n\n    return (\n      <div\n        className={\n          this.state.fullscreen ? \"wrapper-fullscreen\" : \"wrapper-default\"\n        }\n      >\n        <LoadScript\n          googleMapsApiKey={GLOBALSECRETS.mapsKey}\n          libraries={ClueMap.libraries}\n        >\n          <GoogleMap\n            mapContainerStyle={{ width: \"100%\", height: \"100%\" }}\n            center={this.state.center}\n            zoom={13}\n            options={options}\n            onLoad={(map) => {\n              this.map = map;\n            }}\n          >\n            <div\n              className=\"fullscreen-control\"\n              onClick={() =>\n                this.setState({\n                  fullscreen: !this.state.fullscreen,\n                  sidePanel: !this.state.fullscreen,\n                })\n              }\n            >\n              {this.state.fullscreen ? \"Exit Fullscreen\" : \"Enter Fullscreen\"}\n            </div>\n\n            {markers}\n\n            {searchResults}\n\n            {sidePanel}\n          </GoogleMap>\n        </LoadScript>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./popup.css\";\n\n/**\n * An enum describing the different types of popup available.\n */\nexport enum PopupTypes {\n  Confirm = \"confirm\",\n  Input = \"input\",\n  Notif = \"notif\",\n  DropDown = \"dropdown\",\n}\n\n/**\n * Properties type for the Popup Component\n */\ninterface PopupProps {}\n\n/**\n * State type for the Popup Component\n */\ninterface PopupState {\n  showPopup: boolean;\n  popupType?: PopupTypes;\n  popupMessage?: string;\n  options?: Map<number, string>;\n  inputValue: string;\n  clickTypePromise: Promise<boolean>;\n  clickTypeDefer?: DeferredPromise;\n  left: string;\n  top: string;\n}\n\n/**\n * Types for the object representing a deferred promise.\n */\ninterface DeferredPromise {\n  resolve(value?: unknown): void;\n  reject(value?: unknown): void;\n}\n\n/**\n * A component that displays a popup window and takes a response from the user.\n */\nexport default class Popup extends React.Component<PopupProps, PopupState> {\n  constructor(props: PopupProps) {\n    super(props);\n    let deferred = undefined;\n    var p = new Promise<boolean>(function (resolve, reject) {\n      deferred = { resolve: resolve, reject: reject };\n    });\n    this.state = {\n      showPopup: false,\n      inputValue: \"\",\n      clickTypePromise: p,\n      clickTypeDefer: deferred,\n      left: \"30%\",\n      top: \"40%\",\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  /**\n   * Creates a new, unresolved promise to wait for the user to click on a button.\n   */\n  private resetDeferred() {\n    let deferred = undefined;\n    var p = new Promise<boolean>(function (resolve, reject) {\n      deferred = { resolve: resolve, reject: reject };\n    });\n    this.setState({ clickTypePromise: p, clickTypeDefer: deferred });\n  }\n\n  /**\n   * Creates a pop up window.\n   * @param type - the type of popup\n   * @param message - the message to be displayed in the popup\n   * @param onInput - the function to be executed when a user inputs a value to the popup\n   * @param onConfirm - the function to be executed when a user confirms the question asked by the popup\n   */\n  public async popupFactory<T>(\n    type: PopupTypes,\n    message: string,\n    options?: Map<number, string>\n  ): Promise<string> {\n    this.setState({\n      showPopup: true,\n      popupType: type,\n      popupMessage: message,\n      options: options,\n    });\n    const confirm: boolean = await this.state.clickTypePromise;\n    this.setState({ showPopup: false });\n    this.resetDeferred();\n\n    return new Promise<string>((resolve, reject) => {\n      if (confirm) {\n        if (this.state.popupType === PopupTypes.Input) {\n          if (this.state.inputValue === \"\") {\n            reject();\n          }\n\n          resolve(this.state.inputValue);\n          this.setState({ inputValue: \"\" });\n        } else if (this.state.popupType === PopupTypes.DropDown) {\n          if (this.state.inputValue === \"\") {\n            reject();\n          }\n\n          resolve(this.state.inputValue);\n          this.setState({ inputValue: \"\" });\n        } else {\n          resolve();\n        }\n      } else {\n        if (this.state.popupType === PopupTypes.Input) {\n          this.setState({ inputValue: \"\" });\n        }\n        reject();\n      }\n    });\n  }\n\n  /**\n   * Handles the clicking on the popup buttons.\n   */\n  private handleClick(confirm: boolean) {\n    this.state.clickTypeDefer!.resolve(confirm);\n  }\n\n  /**\n   * Creates the buttons for the confirm popup.\n   * @returns a div containing those buttons\n   */\n  private confirm(): JSX.Element {\n    return (\n      <div className=\"popup-button\">\n        <button className=\"okay\" onClick={() => this.handleClick(true)}>\n          Okay\n        </button>\n        <button className=\"cancel\" onClick={() => this.handleClick(false)}>\n          Cancel\n        </button>\n      </div>\n    );\n  }\n\n  /**\n   * Creates the buttons and text field for the input popup.\n   * @returns a div containing those buttons and the field\n   */\n  private input(): JSX.Element {\n    return (\n      <div className=\"popup-button\">\n        <input\n          type=\"text\"\n          id=\"input\"\n          value={this.state.inputValue}\n          onChange={(e) => this.setState({ inputValue: e.target.value })}\n        ></input>\n        <button className=\"okay\" onClick={() => this.handleClick(true)}>\n          Okay\n        </button>\n        <button className=\"cancel\" onClick={() => this.handleClick(false)}>\n          Cancel\n        </button>\n      </div>\n    );\n  }\n\n  /**\n   * Creates the button for the notif popup.\n   * @returns a div containing that button\n   */\n  private notif(): JSX.Element {\n    return (\n      <div className=\"popup-button\">\n        <button className=\"notif\" onClick={() => this.handleClick(true)}>\n          Okay\n        </button>\n      </div>\n    );\n  }\n\n  /**\n   * Creates the buttons and selection box for the dropdown popup\n   * @returns a div containing those elements\n   */\n  private dropdown(): JSX.Element {\n    const dropdown: JSX.Element[] = [];\n    dropdown.push(\n      <option value={\"\"} key={\"\"}>\n        --\n      </option>\n    );\n    this.state.options!.forEach((name: string, id: number) => {\n      dropdown.push(\n        <option value={String(id)} key={id}>\n          {name}\n        </option>\n      );\n    });\n\n    return (\n      <div className=\"popup-button\">\n        <select\n          id=\"input\"\n          value={this.state.inputValue}\n          onChange={(e) => this.setState({ inputValue: e.target.value })}\n        >\n          {dropdown}\n        </select>\n        <button className=\"okay\" onClick={() => this.handleClick(true)}>\n          Select\n        </button>\n        <button className=\"cancel\" onClick={() => this.handleClick(false)}>\n          Cancel\n        </button>\n      </div>\n    );\n  }\n\n  /**\n   * Renders the popup box\n   */\n  render() {\n    let buttons: JSX.Element;\n    // Creates the buttons depending on the popup type.\n    switch (this.state.popupType) {\n      case PopupTypes.Confirm:\n        buttons = this.confirm();\n        break;\n\n      case PopupTypes.Input:\n        buttons = this.input();\n        break;\n\n      case PopupTypes.Notif:\n        buttons = this.notif();\n        break;\n\n      case PopupTypes.DropDown:\n        buttons = this.dropdown();\n        break;\n\n      default:\n        buttons = <div className=\"popup-button\"></div>;\n    }\n\n    // Combines the buttons with the message.\n    return (\n      <div>\n        <div className={this.state.showPopup ? \"popup-bg\" : \"hidden\"}></div>\n        <div className={this.state.showPopup ? \"popup\" : \"hidden\"}>\n          <div className=\"popup-text\">{this.state.popupMessage}</div>\n\n          {buttons}\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ClueMap from \"./clue-map\";\nimport \"../css/clue-frame.css\";\nimport Popup from \"../utils/popup\";\nimport API from \"../utils/API\";\nimport Axios, { AxiosResponse } from \"axios\";\n\n/**\n * Holds a lat and a lng\n */\nexport interface Place {\n  lat: number;\n  lng: number;\n}\n\n/**\n * Holds information about a clue\n */\nexport interface Clue {\n  id: number;\n  list: string;\n  num: number;\n  name: string;\n  desc: string;\n  place: Place;\n  finished: boolean;\n}\n\n/**\n * Sorts clues according first to their list, then their number.\n * @param clue1 comes first if < 0\n * @param clue2 comes first if > 0\n */\nfunction clueCompare(clue1: Clue, clue2: Clue): number {\n  if (clue1.list === clue2.list) {\n    return clue1.num - clue2.num;\n  } else {\n    return clue1.list.localeCompare(clue2.list);\n  }\n}\n\n/**\n * Properties type for the ClueList Component\n */\ninterface ClueListProps {\n  clues: Clue[];\n  select(selection: number): void;\n  selected?: number | string;\n}\n\n/**\n * State type for the GroupList Component\n */\ninterface ClueListState {}\n\n/**\n * A component that displays all of the currently created groups as a selectable list.\n */\nclass ClueList extends React.Component<ClueListProps, ClueListState> {\n  /**\n   * Renders the component\n   */\n  render() {\n    const listItems = this.props.clues.sort(clueCompare).map((clue) => {\n      return (\n        <tr key={clue.id} onClick={() => this.props.select(clue.id)}>\n          <td className={clue.id === this.props.selected ? \"selected\" : \"\"}>\n            {clue.list + clue.num + \": \" + clue.name}\n          </td>\n        </tr>\n      );\n    });\n\n    //TODO make this much much better\n    return (\n      <table className=\"clue-table\">\n        <thead>\n          <tr>\n            <th>List of Clues</th>\n          </tr>\n        </thead>\n        <tbody>{listItems}</tbody>\n      </table>\n    );\n  }\n}\n\n/**\n * Properties type for the ClueFrame Component\n */\ninterface ClueFrameProps {}\n\n/**\n * State type for the ClueFrame Component\n */\ninterface ClueFrameState {\n  clues: Clue[];\n  // Note: number selection values correspond to the selection of an existing clue.\n  // Strings indicate the selection of a clue from search results\n  selected?: number | string;\n}\n\n/**\n * A class to represent a clue frame component.  This displays a list and map of clues,\n * and allows operations on those clues.\n */\nexport default class ClueFrame extends React.Component<\n  ClueFrameProps,\n  ClueFrameState\n> {\n  intervalID?: NodeJS.Timeout;\n  popupRef: React.Ref<Popup>;\n\n  constructor(props: ClueFrameProps) {\n    super(props);\n    this.state = {\n      selected: undefined,\n      clues: [],\n    };\n    this.popupRef = React.createRef();\n    this.updateClues = this.updateClues.bind(this);\n  }\n\n  /**\n   * Gets the list of clues and starts refreshing the data.\n   */\n  componentDidMount() {\n    this.updateClues();\n\n    this.intervalID = setInterval(this.updateClues, 5000);\n  }\n\n  /**\n   * Stops refreshing the clue data when the component is unloaded.\n   */\n  componentWillUnmount() {\n    clearInterval(this.intervalID!);\n  }\n\n  /**\n   * Updates the clues stored in state by making API calls\n   */\n  private updateClues() {\n    const clues: Clue[] = [];\n    let ids: number[] = [];\n    API.get(\"/clues/\")\n      .then((res) => {\n        ids = res.data.clueIDs;\n        return res.data.clueIDs.map((id: number) => {\n          return API.get<AxiosResponse>(\"/clues/\" + id, {});\n        });\n      })\n      .then((routes) => Axios.all<AxiosResponse>(routes))\n      .then((res: AxiosResponse[]) => {\n        res.forEach((res: AxiosResponse, index: number) => {\n          const clue = res.data;\n          clues.push({\n            list: clue.listID,\n            num: clue.clueNumber,\n            name: clue.name,\n            desc: clue.description,\n            finished: clue.finished,\n            place: { lng: clue.long, lat: clue.lat },\n            id: ids[index],\n          });\n        });\n      })\n      .then(() => this.setState({ clues }));\n  }\n\n  /**\n   * Renders the ClueFrame.\n   */\n  render() {\n    return (\n      <div className={\"clue-frame\"}>\n        <div className=\"clue-list\">\n          <ClueList\n            selected={this.state.selected}\n            select={(id: number) => this.setState({ selected: id })}\n            clues={this.state.clues}\n          />\n        </div>\n        <div className=\"clue-map\">\n          <ClueMap\n            clues={this.state.clues}\n            selected={this.state.selected}\n            select={(id: number) => this.setState({ selected: id })}\n          />\n        </div>\n        <Popup ref={this.popupRef} />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"../css/main-page.css\";\n\n/**\n * Properties type for the NavBarFrame Component\n */\ninterface NavBarFrameProps {}\n\n/**\n * State type for the NavBarFrame Component\n */\ninterface NavBarFrameState {}\n\n/**\n * Switches the site between light and dark theme.\n * @param dark is the theme currently dark.\n */\nfunction switchTheme(dark: boolean) {\n  if (dark) {\n    document.documentElement.setAttribute(\"data-theme\", \"light\");\n  } else {\n    document.documentElement.setAttribute(\"data-theme\", \"dark\");\n  }\n}\n\n/**\n * Class to represent the Navigation Bar Component\n */\nexport default class NavBarFrame extends React.Component<\n  NavBarFrameProps,\n  NavBarFrameState\n> {\n  /**\n   * Renders the component.\n   */\n  render() {\n    return (\n      <div className=\"nav-bar\">\n        <a href=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\">Navigation Bar</a>\n        {/* Theme Toggle Swtich */}\n        <div className=\"theme-switch-wrapper\">\n          <label className=\"theme-switch\" htmlFor=\"checkbox\">\n            <input\n              type=\"checkbox\"\n              id=\"checkbox\"\n              onClick={(event: React.MouseEvent) =>\n                switchTheme((event.target as HTMLInputElement).checked)\n              }\n            />\n            <div className=\"slider round\"></div>\n          </label>\n          <em>Enable Light Mode!</em>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { RefObject } from \"react\";\nimport \"../css/path-frame.css\";\nimport API from \"../utils/API\";\nimport Popup, { PopupTypes } from \"../utils/popup\";\n\n/**\n * Properties type for the PathList Component\n */\ninterface PathListProps {\n  paths: Map<number, string>;\n  clickHandler(selection: number): void;\n  selected: number | undefined;\n}\n\n/**\n * State for the PathList Component\n */\ninterface PathListState {}\n\n/**\n * A component that displays all of the currently created paths as a selectable list.\n */\nclass PathList extends React.Component<PathListProps, PathListState> {\n  /**\n   * Renders the component\n   */\n  render() {\n    // Map all path ids to table cells with appropriate information.\n    const paths: JSX.Element[] = [];\n    this.props.paths.forEach((name, id) => {\n      paths.push(\n        <tr key={id} onClick={() => this.props.clickHandler(id)}>\n          <td className={id === this.props.selected ? \"selected\" : \"\"}>\n            {name}\n          </td>\n        </tr>\n      );\n    });\n    return (\n      <div className=\"table-div\">\n        <table className=\"path-table\">\n          <thead>\n            <tr>\n              <th>List of Paths</th>\n            </tr>\n          </thead>\n          <tbody>{paths}</tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\n/**\n * Properties type for the PathFrame Component\n */\ninterface PathFrameProps {\n  paths: Map<number, string>;\n  updateInfo(): void;\n}\n\n/**\n * State type for the PathFrame Component\n */\ninterface PathFrameState {\n  selected: number | undefined;\n}\n\n/**\n * A component to display a list of paths and allow operations on those paths.\n */\nexport default class PathFrame extends React.Component<\n  PathFrameProps,\n  PathFrameState\n> {\n  private popupRef: RefObject<Popup>;\n\n  constructor(props: PathFrameProps) {\n    super(props);\n    this.state = {\n      selected: undefined,\n    };\n    this.popupRef = React.createRef();\n  }\n\n  /**\n   * Clears the selected value if the selected value has been deleted\n   */\n  componentDidUpdate() {\n    if (this.state.selected && !this.props.paths.has(this.state.selected!)) {\n      this.setState({ selected: undefined });\n    }\n  }\n\n  /**\n   * Send a new path to the backend to be added and update the component's state.\n   * @param name The name of a new path.\n   */\n  addPath() {\n    this.popupRef.current\n      ?.popupFactory(PopupTypes.Input, \"Input name for new Path\")\n      .then(\n        (res: string) => {\n          API.post(\"/paths\", { name: res }).then(this.props.updateInfo, (res) =>\n            this.handleAddError(res.response.status)\n          );\n          console.log(\"Tried to add path: \" + res);\n        },\n        () => {}\n      );\n  }\n\n  /**\n   * Handles errors in the add path function\n   * @param status error code for the add request\n   */\n  handleAddError(status: number) {\n    // TODO Actual error code for name already in use\n    if (status === 400) {\n      this.popupRef.current\n        ?.popupFactory(PopupTypes.Notif, \"Name already in use\")\n        .then(() => this.addPath());\n\n      // Unknown error\n    } else {\n      console.log(status);\n      throw new Error(\"Unknown error code\");\n    }\n  }\n\n  /**\n   * Tell the backend to delete a path and update the component's state\n   */\n  deletePath() {\n    if (this.state.selected) {\n      this.popupRef.current\n        ?.popupFactory(PopupTypes.Confirm, \"Delete Selected Path?\")\n        .then(\n          () => {\n            API.delete(\"/paths/\" + this.state.selected, {}).then(\n              this.props.updateInfo,\n              (res) => this.handleDeleteError(res.response.status)\n            );\n            console.log(\"deleted path: \" + this.state.selected);\n          },\n          () => {}\n        );\n    } else {\n      this.popupRef.current?.popupFactory(PopupTypes.Notif, \"No Path Selected\");\n    }\n  }\n\n  /**\n   * Handles errors in the delete path function\n   * @param status error code for the delete request\n   */\n  handleDeleteError(status: number) {\n    // Item already deleted TODO Actual Error code\n    if (status === 400) {\n      this.props.updateInfo();\n\n      // Unknown error\n    } else {\n      console.log(status);\n      throw new Error(\"Unknown error code\");\n    }\n  }\n\n  /**\n   * Tell the backend to delete a path and update the component's state\n   * TODO implement\n   */\n  modifyPath() {\n    if (this.state.selected) {\n      this.popupRef.current?.popupFactory(\n        PopupTypes.Notif,\n        \"Operation Not Implemented\"\n      );\n    } else {\n      this.popupRef.current?.popupFactory(PopupTypes.Notif, \"No Path Selected\");\n    }\n  }\n\n  /**\n   * Handles errors in the modify path function\n   * @param status error code for the modify request\n   */\n  handleModifyError(status: number) {\n    // TODO Actual Error code\n    if (status === 400) {\n      this.popupRef.current?.popupFactory(PopupTypes.Notif, \"Implement me\");\n\n      // Unknown error\n    } else {\n      console.log(status);\n      throw new Error(\"Unknown error code\");\n    }\n  }\n\n  /**\n   * Tell the backend to order the selected path and update the component's state\n   * TODO Implement\n   */\n  orderPath() {\n    if (this.state.selected) {\n      this.popupRef.current?.popupFactory(\n        PopupTypes.Notif,\n        \"Operation Not Implemented\"\n      );\n    } else {\n      this.popupRef.current?.popupFactory(PopupTypes.Notif, \"No Path Selected\");\n    }\n  }\n\n  /**\n   * Handles errors in the order path function\n   * @param status error code for the order request\n   */\n  handleOrderError(status: number) {\n    // TODO Actual Error codes\n    if (status === 400) {\n      this.popupRef.current?.popupFactory(PopupTypes.Notif, \"Implement me\");\n\n      // Unknown error\n    } else {\n      console.log(status);\n      throw new Error(\"Unknown error code\");\n    }\n  }\n\n  /**\n   * Renders the component.\n   */\n  render() {\n    //console.log(this.props.paths);\n    return (\n      <div className=\"path-frame\">\n        <PathList\n          paths={this.props.paths}\n          clickHandler={(id: number) => this.setState({ selected: id })}\n          selected={this.state.selected}\n        />\n        <button className=\"path-button\" onClick={() => this.addPath()}>\n          Add Path\n        </button>\n        <button className=\"path-button\" onClick={() => this.deletePath()}>\n          Delete Path\n        </button>\n        <button className=\"path-button\" onClick={() => this.modifyPath()}>\n          Modify Path\n        </button>\n        <button className=\"path-button\" onClick={() => this.orderPath()}>\n          Order Path\n        </button>\n        <Popup ref={this.popupRef} />\n      </div>\n    );\n  }\n}\n","import React, { RefObject } from \"react\";\nimport \"../css/group-frame.css\";\nimport API from \"../utils/API\";\nimport Popup, { PopupTypes } from \"../utils/popup\";\n\n/**\n * Holds a name and pathID of a group\n */\nexport interface Group {\n  name: String;\n  pathID?: number;\n}\n\n/**\n * Properties type for the GroupList Component\n */\ninterface GroupListProps {\n  groups: Map<number, Group>;\n  paths: Map<number, string>;\n  clickHandler(selection: number): void;\n  selected: number | undefined;\n}\n\n/**\n * State type for the GroupList Component\n */\ninterface GroupListState {}\n\n/**\n * A component that displays all of the currently created groups as a selectable list.\n */\nclass GroupList extends React.Component<GroupListProps, GroupListState> {\n  /**\n   * Renders the component\n   */\n  render() {\n    // Map all groups ids to table cells with appropriate information.\n    const groups: JSX.Element[] = [];\n    this.props.groups.forEach((group, id) => {\n      const path =\n        group.pathID && this.props.paths.has(group.pathID)\n          ? this.props.paths.get(group.pathID!)\n          : \"No assigned path\";\n      groups.push(\n        <tr key={id} onClick={() => this.props.clickHandler(id)}>\n          <td className={id === this.props.selected ? \"selected\" : \"\"}>\n            {group.name + \" -- \" + path}\n          </td>\n        </tr>\n      );\n    });\n    return (\n      <div className=\"table-div\">\n        <table className=\"group-table\">\n          <thead>\n            <tr>\n              <th>List of Groups</th>\n            </tr>\n          </thead>\n          <tbody>{groups}</tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\n/**\n * Properties type for the GroupFrame Component\n */\ninterface GroupFrameProps {\n  groups: Map<number, Group>;\n  paths: Map<number, string>;\n  updateInfo(): void;\n}\n\n/**\n * Properties type for the Group Frame Component\n */\ninterface GroupFrameState {\n  selected?: number;\n}\n\n/**\n * A component to display group information and allow operations on the groups.\n */\nexport default class GroupFrame extends React.Component<\n  GroupFrameProps,\n  GroupFrameState\n> {\n  popupRef: RefObject<Popup>;\n\n  constructor(props: GroupFrameProps) {\n    super(props);\n    this.state = {\n      selected: undefined,\n    };\n    this.popupRef = React.createRef();\n  }\n\n  /**\n   * Clears the selected value if the selected value has been deleted\n   */\n  componentDidUpdate() {\n    if (this.state.selected && !this.props.groups.has(this.state.selected!)) {\n      this.setState({ selected: undefined });\n    }\n  }\n\n  /**\n   * Send a new group to the backend to be added and update the component's state.\n   * @param name The name of a new group.\n   */\n  private addGroup() {\n    this.popupRef.current\n      ?.popupFactory(PopupTypes.Input, \"Input name for new Group\")\n      .then(\n        (res: string) => {\n          API.post(\"/groups\", { name: res }).then(\n            this.props.updateInfo,\n            (res) => this.handleAddError(res.response.status)\n          );\n          console.log(\"Tried to add group: \" + res);\n        },\n        () => {}\n      );\n  }\n\n  /**\n   * Handles errors in the add group method\n   * @param status error code for the add request\n   */\n  private handleAddError(status: number) {\n    // TODO Actual error code for name already in use\n    if (status === 400) {\n      this.popupRef.current\n        ?.popupFactory(PopupTypes.Notif, \"Name already in use\")\n        .then(() => this.addGroup());\n\n      // Unknown error\n    } else {\n      console.log(status);\n      throw new Error(\"Unknown error code\");\n    }\n  }\n\n  /**\n   * Tell the backend to delete a group and update the component's state\n   * @param id The id of the group to be deleted\n   */\n  private deleteGroup() {\n    if (this.state.selected) {\n      this.popupRef.current\n        ?.popupFactory(PopupTypes.Confirm, \"Delete Selected Group?\")\n        .then(\n          () => {\n            API.delete(\"/groups/\" + this.state.selected).then(\n              this.props.updateInfo,\n              (res) => this.handleDeleteError(res.response.status)\n            );\n          },\n          () => {}\n        );\n    } else {\n      this.popupRef.current?.popupFactory(\n        PopupTypes.Notif,\n        \"No Group Selected\"\n      );\n    }\n  }\n\n  /**\n   * Handles errors in the delete group method\n   * @param status error code for the delete request\n   */\n  private handleDeleteError(status: number) {\n    // Item already deleted TODO Actual Error code\n    if (status === 400) {\n      this.props.updateInfo();\n\n      // Unknown error\n    } else {\n      console.log(status);\n      throw new Error(\"Unknown error code\");\n    }\n  }\n\n  private assignPath() {\n    if (this.state.selected) {\n      this.popupRef.current\n        ?.popupFactory(\n          PopupTypes.DropDown,\n          \"Choose a path to assign to the selected group:\",\n          this.props.paths\n        )\n        .then(\n          (res: string) => {\n            API.put(\"/groups/\" + this.state.selected, {\n              pathID: Number(res),\n            }).then(this.props.updateInfo, (res) =>\n              this.handleAssignError(res.response.status, Number(res))\n            );\n            console.log(\n              \"Group: \" + this.state.selected + \" assigned path: \" + res\n            );\n          },\n          () => {}\n        );\n    } else {\n      this.popupRef.current?.popupFactory(\n        PopupTypes.Notif,\n        \"No Group Selected\"\n      );\n    }\n  }\n\n  private handleAssignError(status: number, pathID: number) {\n    // Path Already Assigned to another group TODO actual error code\n    if (status === 400) {\n      this.popupRef.current\n        ?.popupFactory(\n          PopupTypes.Confirm,\n          \"Path already assigned to another group.  Assign anyway?\"\n        )\n        .then(() => {\n          API.put(\"/groups/\" + this.state.selected, {\n            pathID: pathID,\n            override: true,\n          });\n          console.log(\n            \"Group: \" +\n              this.state.selected +\n              \" assigned path: \" +\n              pathID +\n              \" via override\"\n          );\n        });\n\n      // Unknown Error\n    } else {\n      console.log(status);\n      throw new Error(\"Unknown error code\");\n    }\n  }\n\n  /**\n   * Render the component\n   */\n  render() {\n    return (\n      <div className=\"group-frame\">\n        <GroupList\n          paths={this.props.paths}\n          groups={this.props.groups}\n          clickHandler={(id: number) => this.setState({ selected: id })}\n          selected={this.state.selected}\n        />\n        <button\n          className=\"add-group group-button\"\n          onClick={() => this.addGroup()}\n        >\n          Add Group\n        </button>\n        <button\n          className=\"remove-group group-button\"\n          onClick={() => this.deleteGroup()}\n        >\n          Remove Group\n        </button>\n        <button\n          className=\"assign-path group-button\"\n          onClick={() => this.assignPath()}\n        >\n          Assign Path\n        </button>\n        <Popup ref={this.popupRef} />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ClueFrame from \"../frames/clue-frame\";\nimport \"../css/main-page.css\";\nimport \"../css/nav-bar.css\";\nimport NavBarFrame from \"../utils/nav-bar\";\nimport PathFrame from \"../frames/path-frame\";\nimport GroupFrame, { Group } from \"../frames/group-frame\";\nimport API from \"../utils/API\";\n\n/**\n * Properties type for the MainPage Component.\n */\ninterface MainPageProps {}\n\n/**\n * State type for the MainPage Component.\n */\ninterface MainPageState {\n  groups: Map<number, Group>;\n  paths: Map<number, string>;\n}\n\n/**\n * A component that will serve as the main page of the application.  This page will contain clue, path,\n * and group information and allow for modification of those categories.\n */\nexport default class MainPage extends React.Component<\n  MainPageProps,\n  MainPageState\n> {\n  private intervalID?: NodeJS.Timeout;\n  constructor(props: MainPageProps) {\n    super(props);\n    this.state = { groups: new Map(), paths: new Map() };\n    this.updateInfo = this.updateInfo.bind(this);\n  }\n\n  /**\n   * Get the list of path ids from the database if the component will be loaded.\n   */\n  componentDidMount() {\n    this.updateInfo();\n\n    this.intervalID = setInterval(this.updateInfo, 5000);\n  }\n\n  /**\n   * Stop refreshing the data when the component is unloaded.\n   */\n  componentWillUnmount() {\n    clearInterval(this.intervalID!);\n  }\n\n  /**\n   * Update the state by making api calls\n   */\n  private updateInfo() {\n    // Group API calls\n    API.get(\"/groups\", {})\n      .then(async (res) => {\n        const groups = new Map<number, Group>();\n        for (let groupID of res.data.allGroups) {\n          await API.get(\"/groups/\" + groupID, {}).then((group) =>\n            groups.set(groupID, {\n              name: group.data.name,\n              pathID: group.data.pathID,\n            })\n          );\n        }\n        return groups;\n      })\n      .then((groups) => this.setState({ groups }));\n\n    // Path API calls\n    API.get(\"/paths\", {})\n      .then(async (res) => {\n        const paths = new Map<number, string>();\n        for (let pathID of res.data.allPaths) {\n          await API.get(\"/paths/\" + pathID, {}).then((path) => {\n            if (path.data.name) {\n              paths.set(pathID, path.data.name);\n            } else {\n              paths.set(pathID, this.state.paths.get(pathID)!);\n            }\n          });\n        }\n        return paths;\n      })\n      .then((paths) => this.setState({ paths }));\n  }\n\n  render() {\n    return (\n      <div className=\"main-page\">\n        <NavBarFrame />\n        <ClueFrame />\n        <PathFrame paths={this.state.paths} updateInfo={this.updateInfo} />\n        <GroupFrame\n          groups={this.state.groups}\n          paths={this.state.paths}\n          updateInfo={this.updateInfo}\n        />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport MainPage from \"./pages/main-page\";\n\n/**\n * Properties type for the PageLoader Component\n */\ninterface PageLoaderProps {}\n\n/**\n * State type for the PageLoader Component\n */\ninterface PageLoaderState {}\n\n/**\n * A wrapper component that handles displaying a page and the popup component.\n * Logic to control which page is displayed is handled in this component.\n */\nclass PageLoader extends React.Component<PageLoaderProps, PageLoaderState> {\n  /**\n   * Renders the component as a page and popup window contained in a div.\n   */\n  render() {\n    return (\n      <div>\n        <MainPage />\n      </div>\n    );\n  }\n}\n\n/**\n * The main method to actually display content on the page.  This just displays the PageLoader Component.\n */\nReactDOM.render(\n  <React.StrictMode>\n    <PageLoader />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["serviceWorker.ts","secrets.tsx","frames/maps.tsx","utils/popup.tsx","frames/clue-frame.tsx","utils/nav-bar.tsx","utils/API.ts","frames/path-frame.tsx","frames/group-frame.tsx","pages/main-page.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","mapsKey","secrets","require","this","e","Error","ClueMap","props","state","center","lat","lng","markers","Array","from","clues","id","clue","key","position","place","onClick","select","selected","list","num","name","desc","googleMapsApiKey","GLOBALSECRETS","libraries","mapContainerStyle","width","height","zoom","type","placeholder","style","boxSizing","border","padding","borderRadius","boxShadow","fontSize","outline","textOverflow","left","marginLeft","React","Component","PopupTypes","Popup","deferred","undefined","p","Promise","resolve","reject","showPopup","inputValue","clickTypePromise","clickTypeDefer","top","handleClick","bind","setState","message","options","popupType","popupMessage","confirm","resetDeferred","Input","DropDown","className","value","onChange","target","dropdown","forEach","push","String","buttons","Confirm","input","Notif","notif","ClueList","listItems","ClueFrame","popupRef","Map","set","finished","createRef","ref","NavBarFrame","href","htmlFor","event","checked","document","documentElement","setAttribute","axios","defaults","headers","post","create","baseURL","responseType","PathList","paths","clickHandler","PathFrame","has","current","popupFactory","then","res","API","updateInfo","handleAddError","response","status","console","log","addPath","delete","handleDeleteError","deletePath","modifyPath","orderPath","GroupList","groups","group","path","pathID","get","GroupFrame","addGroup","put","Number","handleAssignError","override","deleteGroup","assignPath","MainPage","intervalID","setInterval","clearInterval","a","data","allGroups","groupID","allPaths","PageLoader","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"4cAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mDCLS,MAXb,aAAe,yBADfC,aACc,EACZ,IACE,IAAMC,EAAUC,EAAQ,IACxBC,KAAKH,QAAUC,EAAQ,gBAEzB,MAAOG,GACL,MAAM,IAAIC,MAAM,qG,QCiBDC,E,kDAGjB,WAAYC,GAAsB,IAAD,8BAC7B,cAAMA,IACDC,MAAQ,CACTC,OAAQ,CAAEC,IAAK,WAAYC,KAAM,aAHR,E,qDAUvB,IAAD,OACCC,EAAUC,MAAMC,KAAKX,KAAKI,MAAMQ,OAAO,YAAiB,IAAD,mBAAdC,EAAc,KAAVC,EAAU,KACzD,OAAO,kBAAC,IAAD,CAAQC,IAAKF,EAAIG,SAAUF,EAAKG,MAAOC,QAAS,kBAAM,EAAKd,MAAMe,OAAON,KAC1EA,IAAO,EAAKT,MAAMgB,SACf,kBAAC,IAAD,KACI,6BACI,4BAAKN,EAAKO,KAAOP,EAAKQ,IAAM,KAAOR,EAAKS,MACvCT,EAAKU,OAEE,OAI5B,OACI,kBAAC,IAAD,CACIC,iBAAkBC,EAAc7B,QAChC8B,UAAWxB,EAAQwB,WAEnB,kBAAC,IAAD,CACIC,kBAAmB,CAAEC,MAAO,OAAQC,OAAQ,QAC5CxB,OAAQN,KAAKK,MAAMC,OACnByB,KAAM,IAELtB,EAED,kBAAC,IAAD,KACA,2BACQuB,KAAK,OACLC,YAAY,8BACZC,MAAO,CACHC,UAAU,aACVC,OAAO,wBACPP,MAAM,QACNC,OAAO,OACPO,QAAQ,SACRC,aAAa,MACbC,UAAU,+BACVC,SAAS,OACTC,QAAQ,OACRC,aAAa,WACb1B,SAAU,WACV2B,KAAM,MACNC,WAAY,mB,GAvDPC,IAAMC,WAAtB3C,EACVwB,UAAY,CAAC,U,ICpBZoB,E,sBAAAA,K,kBAAAA,E,cAAAA,E,cAAAA,E,qBAAAA,M,SAuCSC,E,kDACjB,WAAY5C,GAAoB,IAAD,sBAC3B,cAAMA,GACN,IAAI6C,OAAWC,EACXC,EAAI,IAAIC,SAAiB,SAAUC,EAASC,GAC5CL,EAAW,CAAEI,QAASA,EAASC,OAAQA,MAJhB,OAM3B,EAAKjD,MAAQ,CAAEkD,WAAW,EAAOC,WAAY,GAAIC,iBAAkBN,EAAGO,eAAgBT,EAAUN,KAAM,MAAOgB,IAAK,OAClH,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBAPQ,E,4DAc3B,IAAIZ,OAAWC,EACXC,EAAI,IAAIC,SAAiB,SAAUC,EAASC,GAC5CL,EAAW,CAAEI,QAASA,EAASC,OAAQA,MAE3CtD,KAAK8D,SAAS,CAAEL,iBAAkBN,EAAGO,eAAgBT,M,4EAU5BjB,EAAkB+B,EAAiBC,G,qFAC5DhE,KAAK8D,SAAS,CAAEP,WAAW,EAAMU,UAAWjC,EAAMkC,aAAcH,EAASC,QAASA,I,SACnDhE,KAAKK,MAAMoD,iB,cAApCU,E,OACNnE,KAAK8D,SAAS,CAAEP,WAAW,IAC3BvD,KAAKoE,gB,kBAEE,IAAIhB,SAAgB,SAACC,EAASC,GAC7Ba,EACI,EAAK9D,MAAM4D,YAAclB,EAAWsB,OAG7B,EAAKhE,MAAM4D,YAAclB,EAAWuB,UAF3CjB,EAAQ,EAAKhD,MAAMmD,YACnB,EAAKM,SAAS,CAAEN,WAAY,MAK5BH,KAGA,EAAKhD,MAAM4D,YAAclB,EAAWsB,OACpC,EAAKP,SAAS,CAAEN,WAAY,KAEhCF,S,6IAQQa,GAChBnE,KAAKK,MAAMqD,eAAgBL,QAAQc,K,gCAOP,IAAD,OAC3B,OACI,yBAAKI,UAAU,gBACX,4BAAQA,UAAU,OAAOrD,QAAS,kBAAM,EAAK0C,aAAY,KAAzD,QACA,4BAAQW,UAAU,SAASrD,QAAS,kBAAM,EAAK0C,aAAY,KAA3D,a,8BAQkB,IAAD,OACzB,OACI,yBAAKW,UAAU,gBACX,2BAAOvC,KAAK,OAAOnB,GAAG,QAAQ2D,MAAOxE,KAAKK,MAAMmD,WAC5CiB,SAAU,SAACxE,GAAD,OAAO,EAAK6D,SAAS,CAAEN,WAAYvD,EAAEyE,OAAOF,WAC1D,4BAAQD,UAAU,OAAOrD,QAAS,kBAAM,EAAK0C,aAAY,KAAzD,QACA,4BAAQW,UAAU,SAASrD,QAAS,kBAAM,EAAK0C,aAAY,KAA3D,a,8BASkB,IAAD,OACzB,OACI,yBAAKW,UAAU,gBACX,4BAAQA,UAAU,QAAQrD,QAAS,kBAAM,EAAK0C,aAAY,KAA1D,W,iCASqB,IAAD,OACtBe,EAA0B,GAKhC,OAJA3E,KAAKK,MAAM2D,QAASY,SAAQ,SAACrD,EAAcV,GACvC8D,EAASE,KAAK,4BAAQL,MAAOM,OAAOjE,GAAKE,IAAKF,GAAKU,OAInD,yBAAKgD,UAAU,gBACX,4BAAQ1D,GAAG,QAAQ2D,MAAOxE,KAAKK,MAAMmD,WACjCiB,SAAU,SAACxE,GAAD,OAAO,EAAK6D,SAAS,CAAEN,WAAYvD,EAAEyE,OAAOF,UAAWG,GACrE,4BAAQJ,UAAU,OAAOrD,QAAS,kBAAM,EAAK0C,aAAY,KAAzD,UACA,4BAAQW,UAAU,SAASrD,QAAS,kBAAM,EAAK0C,aAAY,KAA3D,a,+BASR,IAAImB,EAEJ,OAAQ/E,KAAKK,MAAM4D,WACf,KAAKlB,EAAWiC,QACZD,EAAU/E,KAAKmE,UACf,MAEJ,KAAKpB,EAAWsB,MACZU,EAAU/E,KAAKiF,QACf,MAEJ,KAAKlC,EAAWmC,MACZH,EAAU/E,KAAKmF,QACf,MAEJ,KAAKpC,EAAWuB,SACZS,EAAU/E,KAAK2E,WACf,MAEJ,QACII,EAAW,yBAAKR,UAAU,iBAIlC,OACI,6BACI,yBAAKA,UAAWvE,KAAKK,MAAMkD,UAAY,WAAa,WACpD,yBAAKgB,UAAWvE,KAAKK,MAAMkD,UAAY,QAAU,UAC7C,yBAAKgB,UAAU,cACVvE,KAAKK,MAAM6D,cAGfa,Q,GA7JclC,IAAMC,WCFnCsC,E,uKAMQ,IAAD,OACCC,EAAY3E,MAAMC,KAAKX,KAAKI,MAAMQ,OAAO,YAAiB,IAAD,mBAAdC,EAAc,KAAVC,EAAU,KAC3D,OACI,wBAAIC,IAAKF,EAAIK,QAAS,kBAAM,EAAKd,MAAMe,OAAON,KAC1C,wBAAI0D,UAAW1D,IAAO,EAAKT,MAAMgB,SAAW,WAAa,IACpDN,EAAKO,KAAOP,EAAKQ,IAAM,KAAOR,EAAKS,UAQpD,OACI,2BAAOgD,UAAU,cACb,+BAAO,4BAAI,+CACX,+BAAQc,Q,GAtBDxC,IAAMC,WAgDRwC,E,kDAGjB,WAAYlF,GAAwB,IAAD,uBAC/B,cAAMA,IAHVmF,cAEmC,EAE/B,IAAM3E,EAAQ,IAAI4E,IAFa,OAG/B5E,EAAM6E,IAAI,EAAG,CAAElE,KAAM,WAAYF,KAAM,IAAKC,IAAK,GAAIoE,UAAU,EAAOlE,KAAM,GAAIP,MAAO,CAAEV,IAAK,SAAUC,KAAM,cAC9GI,EAAM6E,IAAI,EAAG,CAAElE,KAAM,cAAeF,KAAM,IAAKC,IAAK,IAAKoE,UAAU,EAAOlE,KAAM,uBAAwBP,MAAO,CAAEV,IAAK,WAAYC,KAAM,cACxII,EAAM6E,IAAI,EAAG,CAAElE,KAAM,gBAAiBF,KAAM,IAAKC,IAAK,EAAGoE,UAAU,EAAOlE,KAAM,GAAIP,MAAO,CAAEV,IAAK,WAAYC,KAAM,cACpH,EAAKH,MAAQ,CACTe,cAAU8B,EACVtC,SAEJ,EAAK2E,SAAW1C,IAAM8C,YAVS,E,qDAgBzB,IAAD,OACL,OACI,yBAAKpB,UAAW,cACZ,yBAAKA,UAAU,aACX,kBAAC,EAAD,CAAUnD,SAAUpB,KAAKK,MAAMe,SAAUD,OAAQ,SAACN,GAAD,OAAgB,EAAKiD,SAAS,CAAE1C,SAAUP,KACvFD,MAAOZ,KAAKK,MAAMO,SAE1B,yBAAK2D,UAAU,YACX,kBAAC,EAAD,CAAS3D,MAAOZ,KAAKK,MAAMO,MAAOQ,SAAUpB,KAAKK,MAAMe,SAAUD,OAAQ,SAACN,GAAD,OAAgB,EAAKiD,SAAS,CAAC1C,SAAUP,QAEtH,kBAAC,EAAD,CAAO+E,IAAK5F,KAAKuF,gB,GA7BM1C,IAAMC,W,gBC3DxB+C,E,uKAKb,OACI,yBAAKtB,UAAU,WACX,uBAAGuB,KAAK,+CAAR,kBAEA,yBAAKvB,UAAU,wBACX,2BAAOA,UAAU,eAAewB,QAAQ,YACpC,2BAAO/D,KAAK,WAAWnB,GAAG,WACtBK,QAAS,SAAC8E,GAAyCA,EAAMtB,OAA4BuB,QArBzGC,SAASC,gBAAgBC,aAAa,aAAc,SAEpDF,SAASC,gBAAgBC,aAAa,aAAc,WAoBpC,yBAAK7B,UAAU,kBAEnB,wD,GAfqB1B,IAAMC,W,yBC/B/CuD,IAAMC,SAASC,QAAQC,KAAK,+BAAiC,IAK9CH,UAAMI,OAAO,CACxBC,QAAS,yBACTC,aAAc,SCeZC,E,uKAKQ,IAAD,OAECC,EAAuB,GAQ7B,OAPA7G,KAAKI,MAAMyG,MAAMjC,SAAQ,SAACrD,EAAMV,GAC5BgG,EAAMhC,KACF,wBAAI9D,IAAKF,EAAIK,QAAS,kBAAM,EAAKd,MAAM0G,aAAajG,KAAK,wBAAI0D,UAAW1D,IAAO,EAAKT,MAAMgB,SAAW,WAAa,IAC7GG,QAKT,yBAAKgD,UAAU,aACX,2BAAOA,UAAU,cACb,+BAAO,4BAAI,+CACX,+BAAQsC,S,GAnBLhE,IAAMC,WA4CRiE,E,kDAGjB,WAAY3G,GAAwB,IAAD,8BAC/B,cAAMA,IAHFmF,cAE2B,EAE/B,EAAKlF,MAAQ,CACTe,cAAU8B,GAEd,EAAKqC,SAAW1C,IAAM8C,YALS,E,iEAY3B3F,KAAKK,MAAMe,WAAapB,KAAKI,MAAMyG,MAAMG,IAAIhH,KAAKK,MAAMe,WACxDpB,KAAK8D,SAAS,CAAE1C,cAAU8B,M,gCAQvB,IAAD,SACN,UAAAlD,KAAKuF,SAAS0B,eAAd,SAAuBC,aAAanE,EAAWsB,MAAO,2BAA2B8C,MAAK,SAACC,GACnFC,EAAIb,KAAK,QAAS,CAAEjF,KAAM6F,IAAOD,KAAK,EAAK/G,MAAMkH,YAAY,SAACF,GAAD,OAAS,EAAKG,eAAeH,EAAII,SAASC,WACvGC,QAAQC,IAAI,sBAAwBP,MACrC,iB,qCAOQK,GAAiB,IAER,EAFO,OAE3B,GAAe,MAAXA,EAMA,MADAC,QAAQC,IAAIF,GACN,IAAIvH,MAAM,sBALhB,UAAAF,KAAKuF,SAAS0B,eAAd,SAAuBC,aAAanE,EAAWmC,MAAO,uBAAuBiC,MAAK,kBAAM,EAAKS,e,mCAYvF,IACe,EAKlB,EANE,OACL5H,KAAKK,MAAMe,SACX,UAAApB,KAAKuF,SAAS0B,eAAd,SAAuBC,aAAanE,EAAWiC,QAAS,yBAAyBmC,MAAK,WAClFE,EAAIQ,OAAO,SAAW,EAAKxH,MAAMe,SAAU,IAAI+F,KAAK,EAAK/G,MAAMkH,YAAY,SAACF,GAAD,OAAS,EAAKU,kBAAkBV,EAAII,SAASC,WACxHC,QAAQC,IAAI,iBAAmB,EAAKtH,MAAMe,aAC3C,eAEH,UAAApB,KAAKuF,SAAS0B,eAAd,SAAuBC,aAAanE,EAAWmC,MAAO,sB,wCAQ5CuC,GAEd,GAAe,MAAXA,EAMA,MADAC,QAAQC,IAAIF,GACN,IAAIvH,MAAM,sBALhBF,KAAKI,MAAMkH,e,mCAcW,IAAD,EAElB,EAFHtH,KAAKK,MAAMe,SACX,UAAApB,KAAKuF,SAAS0B,eAAd,SAAuBC,aAAanE,EAAWmC,MAAO,6BAEtD,UAAAlF,KAAKuF,SAAS0B,eAAd,SAAuBC,aAAanE,EAAWmC,MAAO,sB,wCAQ5CuC,GAEd,GAAe,MAAXA,EAMA,MADAC,QAAQC,IAAIF,GACN,IAAIvH,MAAM,sBANC,IAAD,EAChB,UAAAF,KAAKuF,SAAS0B,eAAd,SAAuBC,aAAanE,EAAWmC,MAAO,kB,kCAchC,IAAD,EAElB,EAFHlF,KAAKK,MAAMe,SACX,UAAApB,KAAKuF,SAAS0B,eAAd,SAAuBC,aAAanE,EAAWmC,MAAO,6BAEtD,UAAAlF,KAAKuF,SAAS0B,eAAd,SAAuBC,aAAanE,EAAWmC,MAAO,sB,uCAQ7CuC,GAEb,GAAe,MAAXA,EAMA,MADAC,QAAQC,IAAIF,GACN,IAAIvH,MAAM,sBANC,IAAD,EAChB,UAAAF,KAAKuF,SAAS0B,eAAd,SAAuBC,aAAanE,EAAWmC,MAAO,kB,+BAYpD,IAAD,OAEL,OACI,yBAAKX,UAAU,cACX,kBAAC,EAAD,CAAUsC,MAAO7G,KAAKI,MAAMyG,MAAOC,aAAc,SAACjG,GAAD,OAAgB,EAAKiD,SAAS,CAAE1C,SAAUP,KAAOO,SAAUpB,KAAKK,MAAMe,WACvH,4BAAQmD,UAAU,cAAcrD,QAAS,kBAAM,EAAK0G,YAApD,YACA,4BAAQrD,UAAU,cAAcrD,QAAS,kBAAM,EAAK6G,eAApD,eACA,4BAAQxD,UAAU,cAAcrD,QAAS,kBAAM,EAAK8G,eAApD,eACA,4BAAQzD,UAAU,cAAcrD,QAAS,kBAAM,EAAK+G,cAApD,cACA,kBAAC,EAAD,CAAOrC,IAAK5F,KAAKuF,gB,GAjJM1C,IAAMC,WCnCvCoF,G,6KAIM,IAAD,OAEDC,EAAwB,GAW9B,OAVAnI,KAAKI,MAAM+H,OAAOvD,SAAQ,SAACwD,EAAOvH,GAChC,IAAMwH,EAAOD,EAAME,QAAU,EAAKlI,MAAMyG,MAAMG,IAAIoB,EAAME,QAAU,EAAKlI,MAAMyG,MAAM0B,IAAIH,EAAME,QAAW,mBACxGH,EAAOtD,KACL,wBAAI9D,IAAKF,EAAIK,QAAS,kBAAM,EAAKd,MAAM0G,aAAajG,KAClD,wBAAI0D,UAAW1D,IAAO,EAAKT,MAAMgB,SAAW,WAAa,IACtDgH,EAAM7G,KAAO,OAAS8G,QAM7B,yBAAK9D,UAAU,aACb,2BAAOA,UAAU,eACf,+BAAO,4BAAI,gDACX,+BAAQ4D,S,GArBMtF,IAAMC,YA+CT0F,E,kDAGnB,WAAYpI,GAAyB,IAAD,8BAClC,cAAMA,IAHRmF,cAEoC,EAElC,EAAKlF,MAAQ,CACXe,cAAU8B,GAEZ,EAAKqC,SAAW1C,IAAM8C,YALY,E,iEAY9B3F,KAAKK,MAAMe,WAAapB,KAAKI,MAAM+H,OAAOnB,IAAIhH,KAAKK,MAAMe,WAC3DpB,KAAK8D,SAAS,CAAC1C,cAAU8B,M,iCAQT,IAAD,SACjB,UAAAlD,KAAKuF,SAAS0B,eAAd,SAAuBC,aAAanE,EAAWsB,MAAO,4BAA4B8C,MAAK,SAACC,GACtFC,EAAIb,KAAK,UAAW,CAAEjF,KAAM6F,IAAOD,KAAK,EAAK/G,MAAMkH,YAAY,SAACF,GAAD,OAAS,EAAKG,eAAeH,EAAII,SAASC,WACzGC,QAAQC,IAAI,uBAAyBP,MACpC,iB,qCAOkBK,GAAiB,IAElB,EAFiB,OAErC,GAAe,MAAXA,EAMF,MADAC,QAAQC,IAAIF,GACN,IAAIvH,MAAM,sBALhB,UAAAF,KAAKuF,SAAS0B,eAAd,SAAuBC,aAAanE,EAAWmC,MAAO,uBAAuBiC,MAAK,kBAAM,EAAKsB,gB,oCAa1E,IACI,EAIlB,EALa,OAChBzI,KAAKK,MAAMe,SACb,UAAApB,KAAKuF,SAAS0B,eAAd,SAAuBC,aAAanE,EAAWiC,QAAS,0BAA0BmC,MAAK,WACrFE,EAAIQ,OAAO,UAAY,EAAKxH,MAAMe,UAAU+F,KAAK,EAAK/G,MAAMkH,YAAY,SAACF,GAAD,OAAS,EAAKU,kBAAkBV,EAAII,SAASC,cACpH,eAEH,UAAAzH,KAAKuF,SAAS0B,eAAd,SAAuBC,aAAanE,EAAWmC,MAAO,uB,wCAQhCuC,GAExB,GAAe,MAAXA,EAMF,MADAC,QAAQC,IAAIF,GACN,IAAIvH,MAAM,sBALhBF,KAAKI,MAAMkH,e,mCAUO,IACK,EAQlB,EATY,OACftH,KAAKK,MAAMe,SACf,UAAApB,KAAKuF,SAAS0B,eAAd,SAAuBC,aAAanE,EAAWuB,SAAU,iDAAkDtE,KAAKI,MAAMyG,OACnHM,MAAK,SAACC,GACLC,EAAIqB,IAAI,UAAY,EAAKrI,MAAMe,SAAU,CAAEkH,OAAQK,OAAOvB,KACzDD,KAAK,EAAK/G,MAAMkH,YAAY,SAACF,GAAD,OAAS,EAAKwB,kBAAkBxB,EAAII,SAASC,OAAQkB,OAAOvB,OACzFM,QAAQC,IAAI,UAAY,EAAKtH,MAAMe,SAAW,mBAAqBgG,MAClE,eAGH,UAAApH,KAAKuF,SAAS0B,eAAd,SAAuBC,aAAanE,EAAWmC,MAAO,uB,wCAIhCuC,EAAgBa,GAAiB,IAErC,EAFoC,OAExD,GAAe,MAAXb,EAUF,MADAC,QAAQC,IAAIF,GACN,IAAIvH,MAAM,sBAThB,UAAAF,KAAKuF,SAAS0B,eAAd,SAAuBC,aAAanE,EAAWiC,QAAS,2DACvDmC,MAAK,WACJE,EAAIqB,IAAI,UAAY,EAAKrI,MAAMe,SAAU,CAACkH,OAAQA,EAAQO,UAAU,IACpEnB,QAAQC,IAAI,UAAY,EAAKtH,MAAMe,SAAW,mBAAqBkH,EAAS,sB,+BAaxE,IAAD,OACP,OACE,yBAAK/D,UAAU,eACb,kBAAC,EAAD,CAAWsC,MAAO7G,KAAKI,MAAMyG,MAAOsB,OAAQnI,KAAKI,MAAM+H,OACrDrB,aAAc,SAACjG,GAAD,OAAgB,EAAKiD,SAAS,CAAE1C,SAAUP,KACxDO,SAAUpB,KAAKK,MAAMe,WAEvB,4BAAQmD,UAAU,yBAAyBrD,QAAS,kBAAM,EAAKuH,aAA/D,aACA,4BAAQlE,UAAU,4BAA4BrD,QAAS,kBAAM,EAAK4H,gBAAlE,gBACA,4BAAQvE,UAAU,2BAA2BrD,QAAS,kBAAM,EAAK6H,eAAjE,eACA,kBAAC,EAAD,CAAOnD,IAAK5F,KAAKuF,gB,GAzHe1C,IAAMC,WCpDzBkG,E,kDAEjB,WAAY5I,GAAuB,IAAD,8BAC9B,cAAMA,IAFF6I,gBAC0B,EAE9B,EAAK5I,MAAQ,CAAE8H,OAAQ,IAAI3C,IAAOqB,MAAO,IAAIrB,KAC7C,EAAK8B,WAAa,EAAKA,WAAWzD,KAAhB,gBAHY,E,gEAU9B7D,KAAKsH,aAELtH,KAAKiJ,WAAaC,YAAYlJ,KAAKsH,WAAY,O,6CAO/C6B,cAAcnJ,KAAKiJ,c,mCAOD,IAAD,OAEjB5B,EAAIkB,IAAI,SAAU,IAAIpB,KAAtB,uCAA2B,WAAOC,GAAP,qBAAAgC,EAAA,sDACjBjB,EAAS,IAAI3C,IADI,cAEH4B,EAAIiC,KAAKC,WAFN,aAAAF,EAAA,kCAAAA,EAAA,6DAEdG,EAFc,iBAGblC,EAAIkB,IAAI,UAAYgB,EAAS,IAAIpC,MAAK,SAACiB,GAAD,OAAWD,EAAO1C,IAAI8D,EAAS,CAAEhI,KAAM6G,EAAMiB,KAAK9H,KAAM+G,OAAQF,EAAMiB,KAAKf,YAHpG,kSAKhBH,GALgB,gEAA3B,uDAMGhB,MAAK,SAACgB,GAAD,OAAY,EAAKrE,SAAS,CAAEqE,cAIpCd,EAAIkB,IAAI,QAAS,IAAIpB,KAArB,uCAA0B,WAAOC,GAAP,qBAAAgC,EAAA,sDAChBvC,EAAQ,IAAIrB,IADI,cAEH4B,EAAIiC,KAAKG,UAFN,aAAAJ,EAAA,kCAAAA,EAAA,6DAEbd,EAFa,iBAGZjB,EAAIkB,IAAI,SAAWD,EAAQ,IAAInB,MAAK,SAACkB,GACnCA,EAAKgB,KAAK9H,KACVsF,EAAMpB,IAAI6C,EAAQD,EAAKgB,KAAK9H,MAE5BsF,EAAMpB,IAAI6C,EAAQ,EAAKjI,MAAMwG,MAAM0B,IAAID,OAP7B,kSAWfzB,GAXe,gEAA1B,uDAYGM,MAAK,SAACN,GAAD,OAAW,EAAK/C,SAAS,CAAE+C,e,+BAInC,OACI,yBAAKtC,UAAU,aACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWsC,MAAO7G,KAAKK,MAAMwG,MAAOS,WAAYtH,KAAKsH,aACrD,kBAAC,EAAD,CAAYa,OAAQnI,KAAKK,MAAM8H,OAAQtB,MAAO7G,KAAKK,MAAMwG,MAAOS,WAAYtH,KAAKsH,kB,GA7D3DzE,IAAMC,WCHtC2G,E,uKAMF,OAAQ,6BACN,kBAAC,EAAD,W,GAPmB5G,IAAMC,WAgB/B4G,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF1D,SAAS2D,eAAe,SV4FpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7C,MAAK,SAAC8C,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACN1C,QAAQ0C,MAAMA,EAAMrG,c","file":"static/js/main.7438b4a8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","class Secrets {\n  mapsKey: string;\n  constructor() {\n    try { \n      const secrets = require(\"./secrets.json\");\n      this.mapsKey = secrets[\"maps-api-key\"]\n    }\n    catch (e) {\n      throw new Error(\"No secrets.json detected. Please place secrets.json in the project root following the template.\");\n    }\n  }\n}\n\nexport default new Secrets();","import React from \"react\";\nimport GLOBALSECRETS from \"../secrets\";\nimport { GoogleMap, LoadScript, Marker, InfoWindow, Autocomplete } from \"@react-google-maps/api\";\nimport { Clue, Place } from \"./clue-frame\";\n\n\n/**\n * Properties type for the clue map Component\n */\ninterface ClueMapProps {\n    clues: Map<number, Clue>;\n    selected?: number;\n    select(id: number): void;\n}\n\n/**\n * State type for the clue map Component\n */\ninterface ClueMapState {\n    center: Place;\n}\n\n/**\n * A class to represent a clue map component. Display a given list of ClueIDs on a map.\n */\nexport default class ClueMap extends React.Component<ClueMapProps, ClueMapState> {\n    static libraries = [\"places\"];\n\n    constructor(props: ClueMapProps) {\n        super(props);\n        this.state = {\n            center: { lat: 42.3406995, lng: -71.0897018 }\n        }\n    }\n\n    /**\n     * Renders the ClueMap.\n     */\n    render() {\n        const markers = Array.from(this.props.clues, ([id, clue]) => {\n            return <Marker key={id} position={clue.place} onClick={() => this.props.select(id)}>\n                {id === this.props.selected ?\n                    <InfoWindow>\n                        <div>\n                            <h1>{clue.list + clue.num + \": \" + clue.name}</h1>\n                            {clue.desc}\n                        </div>\n                    </InfoWindow> : \"\"}\n            </Marker>\n        })\n\n        return (\n            <LoadScript\n                googleMapsApiKey={GLOBALSECRETS.mapsKey}\n                libraries={ClueMap.libraries}\n            >\n                <GoogleMap\n                    mapContainerStyle={{ width: \"100%\", height: \"100%\" }}\n                    center={this.state.center}\n                    zoom={13}>\n\n                    {markers}\n\n                    <Autocomplete>\n                    <input\n                            type=\"text\"\n                            placeholder=\"Customized your placeholder\"\n                            style={{\n                                boxSizing: `border-box`,\n                                border: `1px solid transparent`,\n                                width: `240px`,\n                                height: `32px`,\n                                padding: `0 12px`,\n                                borderRadius: `3px`,\n                                boxShadow: `0 2px 6px rgba(0, 0, 0, 0.3)`,\n                                fontSize: `14px`,\n                                outline: `none`,\n                                textOverflow: `ellipses`,\n                                position: \"absolute\",\n                                left: \"50%\",\n                                marginLeft: \"-120px\"\n                            }}\n                        />\n                    </Autocomplete>\n\n                </GoogleMap>\n            </LoadScript>\n        )\n    }\n}\n\n","import React from 'react';\nimport './popup.css';\n\n/**\n * An enum describing the different types of popup available.\n */\nexport enum PopupTypes {\n    Confirm = \"confirm\",\n    Input = \"input\",\n    Notif = \"notif\",\n    DropDown = \"dropdown\"\n}\n\n/**\n * Properties type for the Popup Component\n */\ninterface PopupProps {\n}\n\n/**\n * State type for the Popup Component\n */\ninterface PopupState {\n    showPopup: boolean;\n    popupType?: PopupTypes;\n    popupMessage?: string;\n    options?: Map<number, string>;\n    inputValue: string;\n    clickTypePromise: Promise<boolean>;\n    clickTypeDefer?: DeferredPromise;\n    left: string;\n    top: string;\n}\n\n/**\n * Types for the object representing a deferred promise.\n */\ninterface DeferredPromise {\n    resolve(value?: unknown): void;\n    reject(value?: unknown): void;\n}\n\n/**\n * A component that displays a popup window and takes a response from the user.\n */\nexport default class Popup extends React.Component<PopupProps, PopupState> {\n    constructor(props: PopupProps) {\n        super(props);\n        let deferred = undefined;\n        var p = new Promise<boolean>(function (resolve, reject) {\n            deferred = { resolve: resolve, reject: reject };\n        });\n        this.state = { showPopup: false, inputValue: \"\", clickTypePromise: p, clickTypeDefer: deferred, left: \"30%\", top: \"40%\" };\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    /**\n     * Creates a new, unresolved promise to wait for the user to click on a button.\n     */\n    private resetDeferred() {\n        let deferred = undefined;\n        var p = new Promise<boolean>(function (resolve, reject) {\n            deferred = { resolve: resolve, reject: reject };\n        });\n        this.setState({ clickTypePromise: p, clickTypeDefer: deferred })\n    }\n\n    /**\n    * Creates a pop up window.\n    * @param type - the type of popup\n    * @param message - the message to be displayed in the popup\n    * @param onInput - the function to be executed when a user inputs a value to the popup\n    * @param onConfirm - the function to be executed when a user confirms the question asked by the popup\n    */\n    public async popupFactory<T>(type: PopupTypes, message: string, options?: Map<number, string>): Promise<string> {\n        this.setState({ showPopup: true, popupType: type, popupMessage: message, options: options });\n        const confirm: boolean = await this.state.clickTypePromise;\n        this.setState({ showPopup: false });\n        this.resetDeferred();\n\n        return new Promise<string>((resolve, reject) => {\n            if (confirm) {\n                if (this.state.popupType === PopupTypes.Input) {\n                    resolve(this.state.inputValue);\n                    this.setState({ inputValue: \"\" });\n                } else if (this.state.popupType === PopupTypes.DropDown) {\n                    resolve(this.state.inputValue);\n                    this.setState({ inputValue: \"\" });\n                } else {\n                    resolve();\n                }\n            } else {\n                if (this.state.popupType === PopupTypes.Input) {\n                    this.setState({ inputValue: \"\" });\n                }\n                reject();\n            }\n        })\n    }\n\n    /**\n     * Handles the clicking on the popup buttons.\n     */\n    private handleClick(confirm: boolean) {\n        this.state.clickTypeDefer!.resolve(confirm);\n    }\n\n    /**\n     * Creates the buttons for the confirm popup.\n     * @returns a div containing those buttons\n     */\n    private confirm(): JSX.Element {\n        return (\n            <div className=\"popup-button\">\n                <button className=\"okay\" onClick={() => this.handleClick(true)}>Okay</button>\n                <button className=\"cancel\" onClick={() => this.handleClick(false)}>Cancel</button>\n            </div>);\n    }\n\n    /**\n    * Creates the buttons and text field for the input popup.\n    * @returns a div containing those buttons and the field\n    */\n    private input(): JSX.Element {\n        return (\n            <div className=\"popup-button\">\n                <input type=\"text\" id=\"input\" value={this.state.inputValue}\n                    onChange={(e) => this.setState({ inputValue: e.target.value })}></input>\n                <button className=\"okay\" onClick={() => this.handleClick(true)}>Okay</button>\n                <button className=\"cancel\" onClick={() => this.handleClick(false)}>Cancel</button>\n            </div>\n        );\n    }\n\n    /**\n    * Creates the button for the notif popup.\n    * @returns a div containing that button\n    */\n    private notif(): JSX.Element {\n        return (\n            <div className=\"popup-button\">\n                <button className=\"notif\" onClick={() => this.handleClick(true)}>Okay</button>\n            </div>\n        );\n    }\n\n    /**\n     * Creates the buttons and selection box for the dropdown popup\n     * @returns a div containing those elements\n     */\n    private dropdown(): JSX.Element {\n        const dropdown: JSX.Element[] = [];\n        this.state.options!.forEach((name: string, id: number) => {\n            dropdown.push(<option value={String(id)} key={id}>{name}</option>);\n        })\n\n        return (\n            <div className=\"popup-button\">\n                <select id=\"input\" value={this.state.inputValue}\n                    onChange={(e) => this.setState({ inputValue: e.target.value })}>{dropdown}</select>\n                <button className=\"okay\" onClick={() => this.handleClick(true)}>Select</button>\n                <button className=\"cancel\" onClick={() => this.handleClick(false)}>Cancel</button>\n            </div>\n        )\n    }\n\n    /**\n     * Renders the popup box\n     */\n    render() {\n        let buttons: JSX.Element;\n        // Creates the buttons depending on the popup type.\n        switch (this.state.popupType) {\n            case PopupTypes.Confirm:\n                buttons = this.confirm();\n                break;\n\n            case PopupTypes.Input:\n                buttons = this.input();\n                break;\n\n            case PopupTypes.Notif:\n                buttons = this.notif();\n                break;\n\n            case PopupTypes.DropDown:\n                buttons = this.dropdown();\n                break;\n\n            default:\n                buttons = (<div className=\"popup-button\"></div>);\n        }\n\n        // Combines the buttons with the message.\n        return (\n            <div>\n                <div className={this.state.showPopup ? \"popup-bg\" : \"hidden\"}></div>\n                <div className={this.state.showPopup ? \"popup\" : \"hidden\"}>\n                    <div className=\"popup-text\">\n                        {this.state.popupMessage}\n                    </div>\n\n                    {buttons}\n\n                </div>\n            </div>\n\n        );\n    }\n}","import React from \"react\";\nimport ClueMap from \"./maps\";\nimport '../css/clue-frame.css';\nimport Popup from \"../utils/popup\";\n\n/**\n * Holds a lat and a lng\n */\nexport interface Place {\n    lat: number;\n    lng: number;\n}\n\n/**\n * Holds information about a clue\n */\nexport interface Clue {\n    list: string;\n    num: number;\n    name: string;\n    desc: string;\n    place: Place;\n    finished: boolean;\n}\n\n/**\n * Properties type for the ClueList Component\n */\ninterface ClueListProps {\n    clues: Map<number, Clue>;\n    select(selection: number): void;\n    selected?: number;\n}\n\n/**\n* State type for the GroupList Component\n*/\ninterface ClueListState {\n}\n\n/**\n * A component that displays all of the currently created groups as a selectable list.\n */\nclass ClueList extends React.Component<ClueListProps, ClueListState> {\n\n\n    /**\n     * Renders the component\n     */\n    render() {\n        const listItems = Array.from(this.props.clues, ([id, clue]) => {\n            return (\n                <tr key={id} onClick={() => this.props.select(id)}>\n                    <td className={id === this.props.selected ? \"selected\" : \"\"}>\n                        {clue.list + clue.num + \": \" + clue.name}\n                    </td>\n                </tr>\n            )\n        })\n\n\n        //TODO this\n        return (\n            <table className=\"clue-table\">\n                <thead><tr><th>List of Clues</th></tr></thead>\n                <tbody>{listItems}</tbody>\n            </table>\n        );\n    }\n}\n\n\n/**\n * Properties type for the ClueFrame Component\n */\ninterface ClueFrameProps {\n\n}\n\n/**\n * State type for the ClueFrame Component\n */\ninterface ClueFrameState {\n    clues: Map<number, Clue>;\n    selected?: number;\n}\n\n/**\n * A class to represent a clue frame component.  This displays a list and map of clues, \n * and allows operations on those clues.\n */\nexport default class ClueFrame extends React.Component<ClueFrameProps, ClueFrameState> {\n    popupRef: React.Ref<Popup>;\n\n    constructor(props: ClueFrameProps) {\n        super(props);\n        const clues = new Map<number, Clue>();\n        clues.set(1, { name: \"Amelia's\", list: \"A\", num: 69, finished: false, desc: \"\", place: { lat: 42.34117, lng: -71.0874334 } });\n        clues.set(2, { name: \"Speare Hall\", list: \"B\", num: 420, finished: false, desc: \"In front of res-mail\", place: { lat: 42.3406995, lng: -71.0897018 } });\n        clues.set(3, { name: \"Castle Island\", list: \"C\", num: 3, finished: false, desc: \"\", place: { lat: 42.3378643, lng: -71.0125351 } });\n        this.state = {\n            selected: undefined,\n            clues\n        };\n        this.popupRef = React.createRef();\n    }\n\n    /**\n     * Renders the ClueFrame.\n     */\n    render() {\n        return (\n            <div className={\"clue-frame\"}>\n                <div className=\"clue-list\">\n                    <ClueList selected={this.state.selected} select={(id: number) => this.setState({ selected: id })}\n                        clues={this.state.clues} />\n                </div>\n                <div className=\"clue-map\">\n                    <ClueMap clues={this.state.clues} selected={this.state.selected} select={(id: number) => this.setState({selected: id})} />\n                </div>\n                <Popup ref={this.popupRef} />\n            </div>\n\n        )\n    }\n}\n","import React from \"react\";\nimport \"../css/main-page.css\";\n\n/**\n * Properties type for the NavBarFrame Component\n */\ninterface NavBarFrameProps {\n\n}\n\n/**\n * State type for the NavBarFrame Component\n */\ninterface NavBarFrameState {\n\n}\n\n/**\n * Switches the site between light and dark theme.\n * @param dark is the theme currently dark.\n */\nfunction switchTheme(dark: boolean) {\n    if (dark) {\n        document.documentElement.setAttribute('data-theme', 'light');\n    } else {\n        document.documentElement.setAttribute('data-theme', 'dark');\n    }\n}\n\n/**\n * Class to represent the Navigation Bar Component\n */\nexport default class NavBarFrame extends React.Component<NavBarFrameProps, NavBarFrameState> {\n    /**\n     * Renders the component.\n     */\n    render() {\n        return (\n            <div className=\"nav-bar\">\n                <a href=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\">Navigation Bar</a>\n                {/* Theme Toggle Swtich */}\n                <div className=\"theme-switch-wrapper\">\n                    <label className=\"theme-switch\" htmlFor=\"checkbox\" >\n                        <input type=\"checkbox\" id=\"checkbox\"\n                            onClick={(event: React.MouseEvent) => switchTheme((event.target as HTMLInputElement).checked)} />\n                        <div className=\"slider round\"></div>\n                    </label>\n                    <em>Enable Light Mode!</em>\n                </div>\n            </div>\n        )\n    }\n}","import axios from 'axios';\naxios.defaults.headers.post['Access-Control-Allow-Origin'] = '*';\n\n/**\n * Creates the default axios object to access the backend.\n */\nexport default axios.create({\n    baseURL: \"http://localhost:3000/\",\n    responseType: \"json\"\n});","import React, { RefObject } from \"react\";\nimport '../css/path-frame.css';\nimport API from '../utils/API';\nimport Popup, { PopupTypes } from \"../utils/popup\";\n\n/**\n * Properties type for the PathList Component\n */\ninterface PathListProps {\n    paths: Map<number, string>;\n    clickHandler(selection: number): void;\n    selected: number | undefined;\n}\n\n/**\n * State for the PathList Component\n */\ninterface PathListState {\n}\n\n/**\n * A component that displays all of the currently created paths as a selectable list.\n */\nclass PathList extends React.Component<PathListProps, PathListState> {\n\n    /**\n     * Renders the component\n     */\n    render() {\n        // Map all path ids to table cells with appropriate information.\n        const paths: JSX.Element[] = [];\n        this.props.paths.forEach((name, id) => {\n            paths.push(\n                <tr key={id} onClick={() => this.props.clickHandler(id)}><td className={id === this.props.selected ? \"selected\" : \"\"}>\n                    {name}\n                </td></tr>\n            );\n        })\n        return (\n            <div className=\"table-div\">\n                <table className=\"path-table\">\n                    <thead><tr><th>List of Paths</th></tr></thead>\n                    <tbody>{paths}</tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\n/**\n * Properties type for the PathFrame Component\n */\ninterface PathFrameProps {\n    paths: Map<number, string>;\n    updateInfo(): void;\n}\n\n/**\n * State type for the PathFrame Component\n */\ninterface PathFrameState {\n    selected: number | undefined;\n}\n\n/**\n * A component to display a list of paths and allow operations on those paths.\n */\nexport default class PathFrame extends React.Component<PathFrameProps, PathFrameState> {\n    private popupRef: RefObject<Popup>;\n\n    constructor(props: PathFrameProps) {\n        super(props);\n        this.state = {\n            selected: undefined\n        }\n        this.popupRef = React.createRef();\n    }\n\n    /**\n    * Clears the selected value if the selected value has been deleted\n    */\n    componentDidUpdate() {\n        if (this.state.selected && !this.props.paths.has(this.state.selected!)) {\n            this.setState({ selected: undefined });\n        }\n    }\n\n    /**\n     * Send a new path to the backend to be added and update the component's state.\n     * @param name The name of a new path.\n     */\n    addPath() {\n        this.popupRef.current?.popupFactory(PopupTypes.Input, \"Input name for new Path\").then((res: string) => {\n            API.post(\"paths\", { name: res }).then(this.props.updateInfo, (res) => this.handleAddError(res.response.status))\n            console.log(\"Tried to add path: \" + res);\n        }, () => {});\n    }\n\n    /**\n     * Handles errors in the add path function\n     * @param status error code for the add request\n     */\n    handleAddError(status: number) {\n        // TODO Actual error code for name already in use\n        if (status === 400) {\n            this.popupRef.current?.popupFactory(PopupTypes.Notif, \"Name already in use\").then(() => this.addPath());\n\n            // Unknown error\n        } else {\n            console.log(status);\n            throw new Error(\"Unknown error code\");\n        }\n    }\n\n    /**\n     * Tell the backend to delete a path and update the component's state\n     */\n    deletePath() {\n        if (this.state.selected) {\n            this.popupRef.current?.popupFactory(PopupTypes.Confirm, \"Delete Selected Path?\").then(() => {\n                API.delete(\"paths/\" + this.state.selected, {}).then(this.props.updateInfo, (res) => this.handleDeleteError(res.response.status));\n                console.log(\"deleted path: \" + this.state.selected);\n            }, () => {});\n        } else {\n            this.popupRef.current?.popupFactory(PopupTypes.Notif, \"No Path Selected\")\n        }\n    }\n\n    /**\n    * Handles errors in the delete path function\n    * @param status error code for the delete request\n    */\n    handleDeleteError(status: number) {\n        // Item already deleted TODO Actual Error code\n        if (status === 400) {\n            this.props.updateInfo();\n\n            // Unknown error\n        } else {\n            console.log(status);\n            throw new Error(\"Unknown error code\");\n        }\n    }\n\n    /**\n     * Tell the backend to delete a path and update the component's state\n     * TODO implement\n     */\n    modifyPath() {\n        if (this.state.selected) {\n            this.popupRef.current?.popupFactory(PopupTypes.Notif, \"Operation Not Implemented\")\n        } else {\n            this.popupRef.current?.popupFactory(PopupTypes.Notif, \"No Path Selected\")\n        }\n    }\n\n    /**\n    * Handles errors in the modify path function\n    * @param status error code for the modify request\n    */\n    handleModifyError(status: number) {\n        // TODO Actual Error code\n        if (status === 400) {\n            this.popupRef.current?.popupFactory(PopupTypes.Notif, \"Implement me\");\n\n            // Unknown error\n        } else {\n            console.log(status);\n            throw new Error(\"Unknown error code\");\n        }\n    }\n\n    /**\n     * Tell the backend to order the selected path and update the component's state\n     * TODO Implement\n     */\n    orderPath() {\n        if (this.state.selected) {\n            this.popupRef.current?.popupFactory(PopupTypes.Notif, \"Operation Not Implemented\")\n        } else {\n            this.popupRef.current?.popupFactory(PopupTypes.Notif, \"No Path Selected\")\n        }\n    }\n\n    /**\n    * Handles errors in the order path function\n    * @param status error code for the order request\n    */\n    handleOrderError(status: number) {\n        // TODO Actual Error codes\n        if (status === 400) {\n            this.popupRef.current?.popupFactory(PopupTypes.Notif, \"Implement me\")\n\n            // Unknown error\n        } else {\n            console.log(status);\n            throw new Error(\"Unknown error code\");\n        }\n    }\n\n    /**\n     * Renders the component.\n     */\n    render() {\n        //console.log(this.props.paths);\n        return (\n            <div className=\"path-frame\">\n                <PathList paths={this.props.paths} clickHandler={(id: number) => this.setState({ selected: id })} selected={this.state.selected} />\n                <button className=\"path-button\" onClick={() => this.addPath()}>Add Path</button>\n                <button className=\"path-button\" onClick={() => this.deletePath()}>Delete Path</button>\n                <button className=\"path-button\" onClick={() => this.modifyPath()}>Modify Path</button>\n                <button className=\"path-button\" onClick={() => this.orderPath()}>Order Path</button>\n                <Popup ref={this.popupRef} />\n            </div>\n        )\n    }\n}","import React, { RefObject } from \"react\";\nimport \"../css/group-frame.css\";\nimport API from \"../utils/API\";\nimport Popup, { PopupTypes } from \"../utils/popup\";\n\n/**\n * Holds a name and pathID of a group\n */\nexport interface Group {\n  name: String;\n  pathID?: number;\n}\n\n/**\n * Properties type for the GroupList Component\n */\ninterface GroupListProps {\n  groups: Map<number, Group>;\n  paths: Map<number, string>;\n  clickHandler(selection: number): void;\n  selected: number | undefined;\n}\n\n/**\n * State type for the GroupList Component\n */\ninterface GroupListState {\n}\n\n/**\n * A component that displays all of the currently created groups as a selectable list.\n */\nclass GroupList extends React.Component<GroupListProps, GroupListState> {\n  /**\n   * Renders the component\n   */\n  render() {\n    // Map all groups ids to table cells with appropriate information.\n    const groups: JSX.Element[] = [];\n    this.props.groups.forEach((group, id) => {\n      const path = group.pathID && this.props.paths.has(group.pathID) ? this.props.paths.get(group.pathID!) : \"No assigned path\";\n      groups.push(\n        <tr key={id} onClick={() => this.props.clickHandler(id)}>\n          <td className={id === this.props.selected ? \"selected\" : \"\"}>\n            {group.name + \" -- \" + path}\n          </td>\n        </tr>\n      );\n    });\n    return (\n      <div className=\"table-div\">\n        <table className=\"group-table\">\n          <thead><tr><th>List of Groups</th></tr></thead>\n          <tbody>{groups}</tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\n/**\n * Properties type for the GroupFrame Component\n */\ninterface GroupFrameProps {\n  groups: Map<number, Group>;\n  paths: Map<number, string>;\n  updateInfo(): void;\n}\n\n/**\n * Properties type for the Group Frame Component\n */\ninterface GroupFrameState {\n  selected?: number;\n}\n\n/**\n * A component to display group information and allow operations on the groups.\n */\nexport default class GroupFrame extends React.Component<GroupFrameProps, GroupFrameState> {\n  popupRef: RefObject<Popup>;\n\n  constructor(props: GroupFrameProps) {\n    super(props);\n    this.state = {\n      selected: undefined,\n    };\n    this.popupRef = React.createRef();\n  }\n\n  /**\n   * Clears the selected value if the selected value has been deleted\n   */\n  componentDidUpdate() {\n    if (this.state.selected && !this.props.groups.has(this.state.selected!)) {\n      this.setState({selected: undefined});\n    }\n  }\n\n  /**\n   * Send a new group to the backend to be added and update the component's state.\n   * @param name The name of a new group.\n   */\n  private addGroup() {\n    this.popupRef.current?.popupFactory(PopupTypes.Input, \"Input name for new Group\").then((res: string) => {\n      API.post(\"/groups\", { name: res }).then(this.props.updateInfo, (res) => this.handleAddError(res.response.status));\n      console.log(\"Tried to add group: \" + res);\n    }, () => {});\n  }\n\n  /**\n   * Handles errors in the add group method\n   * @param status error code for the add request\n   */\n  private handleAddError(status: number) {\n    // TODO Actual error code for name already in use\n    if (status === 400) {\n      this.popupRef.current?.popupFactory(PopupTypes.Notif, \"Name already in use\").then(() => this.addGroup());\n\n      // Unknown error\n    } else {\n      console.log(status);\n      throw new Error(\"Unknown error code\");\n    }\n  }\n\n  /**\n   * Tell the backend to delete a group and update the component's state\n   * @param id The id of the group to be deleted\n   */\n  private deleteGroup() {\n    if (this.state.selected) {\n      this.popupRef.current?.popupFactory(PopupTypes.Confirm, \"Delete Selected Group?\").then(() => {\n        API.delete(\"groups/\" + this.state.selected).then(this.props.updateInfo, (res) => this.handleDeleteError(res.response.status));\n      }, () => {});\n    } else {\n      this.popupRef.current?.popupFactory(PopupTypes.Notif, \"No Group Selected\");\n    }\n  }\n\n  /**\n   * Handles errors in the delete group method\n   * @param status error code for the delete request\n   */\n  private handleDeleteError(status: number) {\n    // Item already deleted TODO Actual Error code\n    if (status === 400) {\n      this.props.updateInfo();\n\n      // Unknown error\n    } else {\n      console.log(status);\n      throw new Error(\"Unknown error code\");\n    }\n\n  }\n\n  private assignPath() {\n    if (this.state.selected) {\n    this.popupRef.current?.popupFactory(PopupTypes.DropDown, \"Choose a path to assign to the selected group:\", this.props.paths)\n      .then((res: string) => {\n        API.put(\"groups/\" + this.state.selected, { pathID: Number(res) })\n        .then(this.props.updateInfo, (res) => this.handleAssignError(res.response.status, Number(res)));\n        console.log(\"Group: \" + this.state.selected + \" assigned path: \" + res);\n      }, () => {});\n\n    } else {\n      this.popupRef.current?.popupFactory(PopupTypes.Notif, \"No Group Selected\");\n    }\n  }\n\n  private handleAssignError(status: number, pathID: number) {\n    // Path Already Assigned to another group TODO actual error code\n    if (status === 400) {\n      this.popupRef.current?.popupFactory(PopupTypes.Confirm, \"Path already assigned to another group.  Assign anyway?\")\n      .then(() => {\n        API.put(\"groups/\" + this.state.selected, {pathID: pathID, override: true})\n        console.log(\"Group: \" + this.state.selected + \" assigned path: \" + pathID + \" via override\"); \n      });\n\n      // Unknown Error\n    } else {\n      console.log(status);\n      throw new Error(\"Unknown error code\");\n    }\n  }\n\n  /**\n   * Render the component\n   */\n  render() {\n    return (\n      <div className=\"group-frame\">\n        <GroupList paths={this.props.paths} groups={this.props.groups}\n          clickHandler={(id: number) => this.setState({ selected: id })}\n          selected={this.state.selected}\n        />\n        <button className=\"add-group group-button\" onClick={() => this.addGroup()}>Add Group</button>\n        <button className=\"remove-group group-button\" onClick={() => this.deleteGroup()}>Remove Group</button>\n        <button className=\"assign-path group-button\" onClick={() => this.assignPath()}>Assign Path</button>\n        <Popup ref={this.popupRef} />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ClueFrame from \"../frames/clue-frame\";\nimport \"../css/main-page.css\";\nimport \"../css/nav-bar.css\"\nimport NavBarFrame from \"../utils/nav-bar\";\nimport PathFrame from \"../frames/path-frame\";\nimport GroupFrame, { Group } from \"../frames/group-frame\";\nimport API from \"../utils/API\";\n\n/**\n * Properties type for the MainPage Component.\n */\ninterface MainPageProps {\n}\n\n/**\n * State type for the MainPage Component.\n */\ninterface MainPageState {\n    groups: Map<number, Group>;\n    paths: Map<number, string>;\n}\n\n/**\n * A component that will serve as the main page of the application.  This page will contain clue, path, \n * and group information and allow for modification of those categories.\n */\nexport default class MainPage extends React.Component<MainPageProps, MainPageState> {\n    private intervalID?: NodeJS.Timeout;\n    constructor(props: MainPageProps) {\n        super(props);\n        this.state = { groups: new Map(), paths: new Map() };\n        this.updateInfo = this.updateInfo.bind(this);\n    }\n\n    /**\n     * Get the list of path ids from the database if the component will be loaded.\n     */\n    componentDidMount() {\n        this.updateInfo();\n\n        this.intervalID = setInterval(this.updateInfo, 5000);\n    }\n\n    /**\n     * Stop refreshing the data when the component is unloaded.\n     */\n    componentWillUnmount() {\n        clearInterval(this.intervalID!);\n    }\n\n\n    /**\n     * Update the state by making api calls\n     */\n    private updateInfo() {\n        // Group API calls\n        API.get(\"groups\", {}).then(async (res) => {\n            const groups = new Map<number, Group>();\n            for (let groupID of res.data.allGroups) {\n                await API.get(\"groups/\" + groupID, {}).then((group) => groups.set(groupID, { name: group.data.name, pathID: group.data.pathID }));\n            }\n            return groups;\n        }).then((groups) => this.setState({ groups }));\n\n\n        // Path API calls\n        API.get(\"paths\", {}).then(async (res) => {\n            const paths = new Map<number, string>();\n            for (let pathID of res.data.allPaths) {\n                await API.get(\"paths/\" + pathID, {}).then((path) => {\n                    if (path.data.name) {\n                        paths.set(pathID, path.data.name)\n                    } else {\n                        paths.set(pathID, this.state.paths.get(pathID)!);\n                    }\n                });\n            }\n            return paths;\n        }).then((paths) => this.setState({ paths }));\n    }\n\n    render() {\n        return (\n            <div className=\"main-page\">\n                <NavBarFrame />\n                <ClueFrame />\n                <PathFrame paths={this.state.paths} updateInfo={this.updateInfo} />\n                <GroupFrame groups={this.state.groups} paths={this.state.paths} updateInfo={this.updateInfo} />\n            </div>\n        )\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport MainPage from \"./pages/main-page\";\n\n/**\n * Properties type for the PageLoader Component\n */\ninterface PageLoaderProps {\n\n}\n\n/**\n * State type for the PageLoader Component\n */\ninterface PageLoaderState {\n\n}\n\n/**\n * A wrapper component that handles displaying a page and the popup component.\n * Logic to control which page is displayed is handled in this component.\n */\nclass PageLoader extends React.Component<PageLoaderProps, PageLoaderState> {\n\n  /**\n   * Renders the component as a page and popup window contained in a div.\n   */\n  render() {\n    return (<div>\n      <MainPage />\n    </div>);\n  }\n\n}\n\n/**\n * The main method to actually display content on the page.  This just displays the PageLoader Component.\n */\nReactDOM.render(\n  <React.StrictMode>\n    <PageLoader />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}